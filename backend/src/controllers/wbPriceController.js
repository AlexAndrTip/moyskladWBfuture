const wbPriceService = require('../services/wbPriceService');

class WbPriceController {
  constructor() {
    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É –∫–ª–∞—Å—Å–∞
    this.getWbPrices = this.getWbPrices.bind(this);
    this.getLastUpdateStatus = this.getLastUpdateStatus.bind(this);
    this.updatePricesForCabinet = this.updatePricesForCabinet.bind(this);
    this.testGetAllGoods = this.testGetAllGoods.bind(this);
    this.testUpdateProduct = this.testUpdateProduct.bind(this);
    this.testToken = this.testToken.bind(this);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω —Å WB API –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
  async getWbPrices(req, res) {
    try {
      const { limit = 100, offset = 0 } = req.query;
      
      console.log('üöÄ –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω —Å WB API...');
      
      const result = await wbPriceService.getPricesForProducts(limit, offset);
      
      res.json({
        success: true,
        message: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
        data: result
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ getWbPrices:', error);
      res.status(500).json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω —Å WB API',
        error: error.message 
      });
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
  async getLastUpdateStatus(req, res) {
    try {
      const status = await wbPriceService.getUpdateStatus();
      
      res.json({
        success: true,
        data: status
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ getLastUpdateStatus:', error);
      res.status(500).json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
        error: error.message 
      });
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ WB –∫–∞–±–∏–Ω–µ—Ç–∞
  async updatePricesForCabinet(req, res) {
    try {
      const { cabinetId } = req.params;
      const { limit = 100, offset = 0 } = req.query;
      
      console.log(`üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è WB –∫–∞–±–∏–Ω–µ—Ç–∞: ${cabinetId}`);
      
      const result = await wbPriceService.updatePricesForCabinetById(cabinetId, limit, offset);
      
      res.json({
        success: true,
        message: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
        data: result
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ updatePricesForCabinet:', error);
      res.status(500).json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞',
        error: error.message 
      });
    }
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å WB API
  async testGetAllGoods(req, res) {
    try {
      const { cabinetId } = req.params;
      const { maxPages = 3 } = req.query; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–∞–∫—Å–∏–º—É–º 3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Ç–µ—Å—Ç–∞
      
      console.log(`üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è WB –∫–∞–±–∏–Ω–µ—Ç–∞: ${cabinetId}`);
      
      // –ù–∞—Ö–æ–¥–∏–º –∫–∞–±–∏–Ω–µ—Ç
      const WbCabinet = require('../models/WbCabinet');
      const cabinet = await WbCabinet.findById(cabinetId).select('+token');
      
      if (!cabinet) {
        return res.status(404).json({
          success: false,
          message: 'WB –∫–∞–±–∏–Ω–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
      }

      if (!cabinet.token) {
        return res.status(400).json({
          success: false,
          message: '–î–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω'
        });
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å WB API
      const allGoods = await wbPriceService.getAllWbGoods(cabinet.token, parseInt(maxPages));
      
      res.json({
        success: true,
        message: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
        data: {
          cabinetName: cabinet.name,
          totalGoods: allGoods.length,
          goods: allGoods.slice(0, 10), // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Ç–æ–≤–∞—Ä–æ–≤
          sampleGoods: allGoods.slice(0, 3) // –î–µ—Ç–∞–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
        }
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ testGetAllGoods:', error);
      res.status(500).json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤',
        error: error.message 
      });
    }
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
  async testUpdateProduct(req, res) {
    try {
      const { cabinetId, nmID } = req.params;
      
      console.log(`üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–∞ nmID: ${nmID} –≤ –∫–∞–±–∏–Ω–µ—Ç–µ: ${cabinetId}`);
      
      // –ù–∞—Ö–æ–¥–∏–º –∫–∞–±–∏–Ω–µ—Ç
      const WbCabinet = require('../models/WbCabinet');
      const cabinet = await WbCabinet.findById(cabinetId).select('+token');
      
      if (!cabinet) {
        return res.status(404).json({
          success: false,
          message: 'WB –∫–∞–±–∏–Ω–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
      }

      if (!cabinet.token) {
        return res.status(400).json({
          success: false,
          message: '–î–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω'
        });
      }

      // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –≤ –ë–î
      const Product = require('../models/Product');
      const product = await Product.findOne({ nmID: parseInt(nmID) });
      
      if (!product) {
        return res.status(404).json({
          success: false,
          message: `–¢–æ–≤–∞—Ä —Å nmID ${nmID} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î`
        });
      }

      console.log(`üì¶ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: ${product.title || product.nmID}`);

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å WB API (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Ç–µ—Å—Ç–∞)
      const allGoods = await wbPriceService.getAllWbGoods(cabinet.token, 1);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω—É–∂–Ω–æ–º—É nmID
      const targetGood = allGoods.find(good => good.nmID === parseInt(nmID));
      
      if (!targetGood) {
        return res.status(404).json({
          success: false,
          message: `–¢–æ–≤–∞—Ä —Å nmID ${nmID} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ WB API`,
          data: {
            cabinetName: cabinet.name,
            productTitle: product.title || product.nmID,
            availableNmIDs: allGoods.slice(0, 20).map(g => g.nmID)
          }
        });
      }

      console.log(`‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω –≤ WB API, —Ä–∞–∑–º–µ—Ä–æ–≤: ${targetGood.sizes.length}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
      const updateResult = await wbPriceService.updateProductPrices([targetGood]);
      
      res.json({
        success: true,
        message: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
        data: {
          cabinetName: cabinet.name,
          productTitle: product.title || product.nmID,
          productNmID: nmID,
          wbGood: {
            nmID: targetGood.nmID,
            sizes: targetGood.sizes.map(s => ({
              sizeID: s.sizeID,
              price: s.price,
              discountedPrice: s.discountedPrice,
              clubDiscountedPrice: s.clubDiscountedPrice
            }))
          },
          updateResult
        }
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ testUpdateProduct:', error);
      res.status(500).json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω',
        error: error.message 
      });
    }
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–±–∏–Ω–µ—Ç–µ
  async testToken(req, res) {
    try {
      const { cabinetId } = req.params;
      
      console.log(`üîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞: ${cabinetId}`);
      
      // –ù–∞—Ö–æ–¥–∏–º –∫–∞–±–∏–Ω–µ—Ç
      const WbCabinet = require('../models/WbCabinet');
      const cabinet = await WbCabinet.findById(cabinetId).select('+token');
      
      if (!cabinet) {
        return res.status(404).json({
          success: false,
          message: 'WB –∫–∞–±–∏–Ω–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
      }

      if (!cabinet.token) {
        return res.status(400).json({
          success: false,
          message: '–î–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω'
        });
      }

      console.log(`üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–±–∏–Ω–µ—Ç–µ:`);
      console.log(`   - –ù–∞–∑–≤–∞–Ω–∏–µ: ${cabinet.name}`);
      console.log(`   - ID: ${cabinet._id}`);
      console.log(`   - –¢–æ–∫–µ–Ω: ${cabinet.token.substring(0, 50)}...`);
      console.log(`   - –î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞: ${cabinet.token.length}`);

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ WB API
      const axios = require('axios');
      const testUrl = 'https://discounts-prices-api.wildberries.ru/api/v2/list/goods/filter';
      
      console.log(`üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ WB API:`);
      console.log(`   - URL: ${testUrl}`);
      console.log(`   - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: limit=1, offset=0`);
      
      const response = await axios.get(testUrl, {
        params: {
          limit: 1,
          offset: 0
        },
        headers: {
          'Authorization': `Bearer ${cabinet.token}`,
          'Content-Type': 'application/json'
        },
        timeout: 10000
      });

      console.log(`‚úÖ –û—Ç–≤–µ—Ç –æ—Ç WB API:`);
      console.log(`   - –°—Ç–∞—Ç—É—Å: ${response.status}`);
      console.log(`   - –ó–∞–≥–æ–ª–æ–≤–∫–∏:`, response.headers);
      console.log(`   - –î–∞–Ω–Ω—ã–µ:`, JSON.stringify(response.data, null, 2));

      res.json({
        success: true,
        message: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
        data: {
          cabinetName: cabinet.name,
          cabinetId: cabinet._id,
          tokenPreview: cabinet.token.substring(0, 50) + '...',
          tokenLength: cabinet.token.length,
          apiResponse: {
            status: response.status,
            statusText: response.statusText,
            headers: response.headers,
            data: response.data
          }
        }
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ testToken:', error);
      
      let errorDetails = {
        message: error.message
      };
      
      if (error.response) {
        errorDetails.status = error.response.status;
        errorDetails.statusText = error.response.statusText;
        errorDetails.data = error.response.data;
        errorDetails.headers = error.response.headers;
      }
      
      res.status(500).json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞',
        error: errorDetails
      });
    }
  }
}

module.exports = new WbPriceController(); 