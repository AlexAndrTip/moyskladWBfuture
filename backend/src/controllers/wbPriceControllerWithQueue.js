const wbPriceService = require('../services/wbPriceService');
const queueService = require('../queue/services/queueService');

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω–∞–º–∏ WB —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ—á–µ—Ä–µ–¥–µ–π
 * –≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
 */
class WbPriceControllerWithQueue {
  constructor() {
    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É –∫–ª–∞—Å—Å–∞
    this.getWbPrices = this.getWbPrices.bind(this);
    this.updatePricesForUser = this.updatePricesForUser.bind(this);
    this.updatePricesForCabinet = this.updatePricesForCabinet.bind(this);
    this.getLastUpdateStatus = this.getLastUpdateStatus.bind(this);
    this.testToken = this.testToken.bind(this);
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å (–Ω–æ–≤—ã–π –º–µ—Ç–æ–¥)
   * POST /api/wb-prices/queue-update
   */
  async queuePriceUpdate(req, res) {
    try {
      const userId = req.user._id;
      const { cabinetId, limit = 100, offset = 0, priority = 5 } = req.body;

      console.log(`üöÄ [WB_PRICE_CONTROLLER] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (!cabinetId) {
        return res.status(400).json({
          success: false,
          message: 'cabinetId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
        });
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–±–∏–Ω–µ—Ç–µ –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
      const WbCabinet = require('../models/WbCabinet');
      const cabinet = await WbCabinet.findById(cabinetId);
      
      if (!cabinet) {
        return res.status(404).json({
          success: false,
          message: 'WB –∫–∞–±–∏–Ω–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
      const result = await queueService.addTask('WB_PRICE_UPDATE', {
        cabinetId,
        userId,
        limit,
        offset
      }, userId, {
        priority,
        cabinetName: cabinet.name,
        maxAttempts: 3,
        estimatedDuration: 300 // 5 –º–∏–Ω—É—Ç
      });

      if (result.success) {
        res.status(201).json({
          success: true,
          message: '–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å',
          data: {
            taskId: result.taskId,
            cabinetName: cabinet.name,
            estimatedDuration: '5 –º–∏–Ω—É—Ç'
          }
        });
      } else {
        res.status(500).json({
          success: false,
          message: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å',
          error: result.error
        });
      }

    } catch (error) {
      console.error('‚ùå [WB_PRICE_CONTROLLER] –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å:', error.message);
      res.status(500).json({
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        error: error.message
      });
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω —Å WB API –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   * GET /api/wb-prices/update
   */
  async getWbPrices(req, res) {
    try {
      const { limit = 100, offset = 0 } = req.query;
      const userId = req.user._id; // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
      
      console.log(`üöÄ [WB_PRICE_CONTROLLER] –ù–∞—á–∞–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω —Å WB API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
      
      const result = await wbPriceService.getPricesForProducts(limit, offset, userId);
      
      res.json({
        success: true,
        message: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
        data: result
      });

    } catch (error) {
      console.error('‚ùå [WB_PRICE_CONTROLLER] –û—à–∏–±–∫–∞ –≤ getWbPrices:', error);
      res.status(500).json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω —Å WB API',
        error: error.message 
      });
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –≤—Å–µ—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
   * POST /api/wb-prices/queue-update-all
   */
  async queueUpdateAllPrices(req, res) {
    try {
      const userId = req.user._id;
      const { priority = 5 } = req.body;
      
      console.log(`üöÄ [WB_PRICE_CONTROLLER] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –¥–ª—è –≤—Å–µ—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–±–∏–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const WbCabinet = require('../models/WbCabinet');
      const wbCabinets = await WbCabinet.find({ user: userId }).select('+token');
      
      if (!wbCabinets || wbCabinets.length === 0) {
        return res.status(404).json({ 
          success: false,
          message: '–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö WB –∫–∞–±–∏–Ω–µ—Ç–æ–≤' 
        });
      }

      const results = [];
      let totalTasks = 0;

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
      for (const cabinet of wbCabinets) {
        try {
          console.log(`üöÄ [WB_PRICE_CONTROLLER] –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞: ${cabinet.name}`);
          
          const result = await queueService.addTask('WB_PRICE_UPDATE', {
            cabinetId: cabinet._id,
            userId,
            limit: 100,
            offset: 0
          }, userId, {
            priority,
            cabinetName: cabinet.name,
            maxAttempts: 3,
            estimatedDuration: 300
          });

          if (result.success) {
            results.push({
              cabinetId: cabinet._id,
              cabinetName: cabinet.name,
              taskId: result.taskId,
              success: true
            });
            totalTasks++;
          } else {
            results.push({
              cabinetId: cabinet._id,
              cabinetName: cabinet.name,
              success: false,
              error: result.error
            });
          }

        } catch (error) {
          console.error(`‚ùå [WB_PRICE_CONTROLLER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinet.name}:`, error.message);
          
          results.push({
            cabinetId: cabinet._id,
            cabinetName: cabinet.name,
            success: false,
            error: error.message
          });
        }
      }

      res.json({
        success: true,
        message: `–î–æ–±–∞–≤–ª–µ–Ω–æ ${totalTasks} –∑–∞–¥–∞—á –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å`,
        data: {
          totalCabinets: wbCabinets.length,
          totalTasks,
          results
        }
      });

    } catch (error) {
      console.error('‚ùå [WB_PRICE_CONTROLLER] –û—à–∏–±–∫–∞ –≤ queueUpdateAllPrices:', error);
      res.status(500).json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥—å',
        error: error.message 
      });
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –≤—Å–µ—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   * GET /api/wb-prices/update-user
   */
  async updatePricesForUser(req, res) {
    try {
      const userId = req.user._id;
      const { limit = 100, offset = 0 } = req.query;
      
      console.log(`üöÄ [WB_PRICE_CONTROLLER] –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –≤—Å–µ—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–±–∏–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const WbCabinet = require('../models/WbCabinet');
      const wbCabinets = await WbCabinet.find({ user: userId }).select('+token');
      
      if (!wbCabinets || wbCabinets.length === 0) {
        return res.status(404).json({ 
          success: false,
          message: '–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö WB –∫–∞–±–∏–Ω–µ—Ç–æ–≤' 
        });
      }

      const results = [];
      let totalUpdated = 0;
      let totalErrors = 0;

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–∞–±–∏–Ω–µ—Ç
      for (const cabinet of wbCabinets) {
        try {
          console.log(`üöÄ [WB_PRICE_CONTROLLER] –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞: ${cabinet.name}`);
          
          const result = await wbPriceService.updatePricesForCabinetById(cabinet._id, limit, offset);

          results.push({
            cabinetId: cabinet._id,
            cabinetName: cabinet.name,
            ...result
          });

          if (result.success) {
            totalUpdated += result.updated || 0;
          } else {
            totalErrors++;
          }

        } catch (error) {
          console.error(`‚ùå [WB_PRICE_CONTROLLER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinet.name}:`, error.message);
          
          results.push({
            cabinetId: cabinet._id,
            cabinetName: cabinet.name,
            success: false,
            error: error.message
          });
          totalErrors++;
        }
      }

      res.json({
        success: true,
        message: `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–±–∏–Ω–µ—Ç–æ–≤: ${wbCabinets.length}`,
        data: {
          totalCabinets: wbCabinets.length,
          totalUpdated,
          totalErrors,
          results
        }
      });

    } catch (error) {
      console.error('‚ùå [WB_PRICE_CONTROLLER] –û—à–∏–±–∫–∞ –≤ updatePricesForUser:', error);
      res.status(500).json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω',
        error: error.message 
      });
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ WB –∫–∞–±–∏–Ω–µ—Ç–∞ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
   * POST /api/wb-prices/queue-update/:cabinetId
   */
  async queueUpdatePricesForCabinet(req, res) {
    try {
      const userId = req.user._id;
      const cabinetId = req.params.cabinetId;
      const { limit = 100, offset = 0, priority = 5 } = req.body;

      console.log(`üöÄ [WB_PRICE_CONTROLLER] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinetId}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–±–∏–Ω–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const WbCabinet = require('../models/WbCabinet');
      const cabinet = await WbCabinet.findOne({ 
        _id: cabinetId, 
        user: userId 
      });

      if (!cabinet) {
        return res.status(404).json({ 
          success: false,
          message: 'WB –∫–∞–±–∏–Ω–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ' 
        });
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
      const result = await queueService.addTask('WB_PRICE_UPDATE', {
        cabinetId,
        userId,
        limit,
        offset
      }, userId, {
        priority,
        cabinetName: cabinet.name,
        maxAttempts: 3,
        estimatedDuration: 300
      });

      if (result.success) {
        res.json({
          success: true,
          message: `–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ "${cabinet.name}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å`,
          data: {
            taskId: result.taskId,
            cabinetId: cabinet._id,
            cabinetName: cabinet.name,
            estimatedDuration: '5 –º–∏–Ω—É—Ç'
          }
        });
      } else {
        res.status(500).json({
          success: false,
          message: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å',
          error: result.error
        });
      }

    } catch (error) {
      console.error('‚ùå [WB_PRICE_CONTROLLER] –û—à–∏–±–∫–∞ –≤ queueUpdatePricesForCabinet:', error);
      res.status(500).json({ 
        success: false, 
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        error: error.message 
      });
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ WB –∫–∞–±–∏–Ω–µ—Ç–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   * GET /api/wb-prices/cabinet/:cabinetId
   */
  async updatePricesForCabinet(req, res) {
    try {
      const userId = req.user._id;
      const cabinetId = req.params.cabinetId;
      const { limit = 100, offset = 0 } = req.query;

      console.log(`üöÄ [WB_PRICE_CONTROLLER] –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinetId}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–±–∏–Ω–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const WbCabinet = require('../models/WbCabinet');
      const cabinet = await WbCabinet.findOne({ 
        _id: cabinetId, 
        user: userId 
      });

      if (!cabinet) {
        return res.status(404).json({ 
          success: false,
          message: 'WB –∫–∞–±–∏–Ω–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ' 
        });
      }

      const result = await wbPriceService.updatePricesForCabinetById(cabinetId, limit, offset);
      
      res.json({
        success: true,
        message: `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ "${cabinet.name}" –∑–∞–≤–µ—Ä—à–µ–Ω–æ`,
        data: {
          cabinetId: cabinet._id,
          cabinetName: cabinet.name,
          ...result
        }
      });

    } catch (error) {
      console.error('‚ùå [WB_PRICE_CONTROLLER] –û—à–∏–±–∫–∞ –≤ updatePricesForCabinet:', error);
      res.status(500).json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω –∫–∞–±–∏–Ω–µ—Ç–∞',
        error: error.message 
      });
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
   * GET /api/wb-prices/status
   */
  async getLastUpdateStatus(req, res) {
    try {
      const status = await wbPriceService.getUpdateStatus();
      
      res.json({
        success: true,
        data: status
      });

    } catch (error) {
      console.error('‚ùå [WB_PRICE_CONTROLLER] –û—à–∏–±–∫–∞ –≤ getLastUpdateStatus:', error);
      res.status(500).json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
        error: error.message 
      });
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–±–∏–Ω–µ—Ç–µ
   * GET /api/wb-prices/test-token/:cabinetId
   */
  async testToken(req, res) {
    try {
      const userId = req.user._id;
      const cabinetId = req.params.cabinetId;

      console.log(`üß™ [WB_PRICE_CONTROLLER] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinetId}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–±–∏–Ω–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const WbCabinet = require('../models/WbCabinet');
      const cabinet = await WbCabinet.findOne({ 
        _id: cabinetId, 
        user: userId 
      }).select('+token');

      if (!cabinet) {
        return res.status(404).json({ 
          success: false,
          message: 'WB –∫–∞–±–∏–Ω–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ' 
        });
      }

      if (!cabinet.token) {
        return res.status(400).json({
          success: false,
          message: '–î–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω'
        });
      }

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
      const result = await wbPriceService.testToken(cabinet.token);

      res.json({
        success: true,
        message: '–¢–µ—Å—Ç —Ç–æ–∫–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω',
        data: {
          cabinetId: cabinet._id,
          cabinetName: cabinet.name,
          ...result
        }
      });

    } catch (error) {
      console.error('‚ùå [WB_PRICE_CONTROLLER] –û—à–∏–±–∫–∞ –≤ testToken:', error);
      res.status(500).json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞',
        error: error.message 
      });
    }
  }
}

module.exports = new WbPriceControllerWithQueue();
