console.log('üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º axios –¥–ª—è MoySkladPriceService...');
const axios = require('axios');
console.log('‚úÖ axios –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');

class MoySkladPriceService {
  constructor() {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MoySkladPriceService...');
    this.baseUrl = 'https://api.moysklad.ru/api/remap/1.2';
    console.log('‚úÖ MoySkladPriceService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –±–∞–∑–æ–≤—ã–º URL:', this.baseUrl);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—ã –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ–¥–Ω–∏–º —Ä–∞–∑–º–µ—Ä–æ–º
   * @param {string} token - –¢–æ–∫–µ–Ω –ú–æ–π–°–∫–ª–∞–¥
   * @param {number} limit - –õ–∏–º–∏—Ç —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (–º–∞–∫—Å 1000)
   * @param {number} offset - –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
   * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–∞–º–∏
   */
  async getProductPrices(token, limit = 1000, offset = 0) {
    try {
      const response = await axios.get(`${this.baseUrl}/entity/product`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        params: {
          limit: Math.min(limit, 1000), // –ú–∞–∫—Å–∏–º—É–º 1000
          offset: offset
        }
      });

      return response.data.rows || [];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ú–æ–π–°–∫–ª–∞–¥:', error.message);
      throw new Error(`–û—à–∏–±–∫–∞ API –ú–æ–π–°–∫–ª–∞–¥: ${error.message}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—ã –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ (—Å —Ä–∞–∑–º–µ—Ä–∞–º–∏)
   * @param {string} token - –¢–æ–∫–µ–Ω –ú–æ–π–°–∫–ª–∞–¥
   * @param {number} limit - –õ–∏–º–∏—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (–º–∞–∫—Å 1000)
   * @param {number} offset - –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
   * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å —Ü–µ–Ω–∞–º–∏
   */
  async getVariantPrices(token, limit = 1000, offset = 0) {
    try {
      const response = await axios.get(`${this.baseUrl}/entity/variant`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        params: {
          limit: Math.min(limit, 1000), // –ú–∞–∫—Å–∏–º—É–º 1000
          offset: offset
        }
      });

      return response.data.rows || [];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑ –ú–æ–π–°–∫–ª–∞–¥:', error.message);
      throw new Error(`–û—à–∏–±–∫–∞ API –ú–æ–π–°–∫–ª–∞–¥: ${error.message}`);
    }
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Ü–µ–Ω —Ç–æ–≤–∞—Ä–∞
   * @param {Array} salePrices - –ú–∞—Å—Å–∏–≤ —Ü–µ–Ω –ø—Ä–æ–¥–∞–∂–∏
   * @returns {number|null} –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –∏–ª–∏ null
   */
  extractSalePrice(salePrices) {
    console.log(`  üîç –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ –∏–∑ ${salePrices ? salePrices.length : 0} —Ü–µ–Ω...`);
    
    if (!salePrices || !Array.isArray(salePrices)) {
      console.log(`  ‚ö†Ô∏è salePrices –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º –∏–ª–∏ –ø—É—Å—Ç–æ–π`);
      return null;
    }

    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Ü–µ–Ω–∞—Ö
    salePrices.forEach((price, index) => {
      console.log(`    üí∞ –¶–µ–Ω–∞ ${index + 1}: value=${price.value}, type=${price.priceType?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
    });

    // –ò—â–µ–º —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ –ø–æ —Ç–∏–ø—É "–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏"
    console.log(`  üîç –ò—â–µ–º —Ü–µ–Ω—É —Å —Ç–∏–ø–æ–º "–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏"...`);
    const salePrice = salePrices.find(price => 
      price.priceType && 
      price.priceType.name === '–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏'
    );

    if (salePrice && salePrice.value) {
      console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ${salePrice.value}`);
      return salePrice.value;
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Ü–µ–Ω—É
    console.log(`  üîç –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Ü–µ–Ω—É...`);
    if (salePrices.length > 0 && salePrices[0].value) {
      console.log(`  ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Ü–µ–Ω—É: ${salePrices[0].value}`);
      return salePrices[0].value;
    }

    console.log(`  ‚ö†Ô∏è –ü–æ–¥—Ö–æ–¥—è—â–∞—è —Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    return null;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
   * @param {string} token - –¢–æ–∫–µ–Ω –ú–æ–π–°–∫–ª–∞–¥
   * @param {string} entityType - –¢–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏: 'product' –∏–ª–∏ 'variant'
   * @returns {Promise<Array>} –í—Å–µ —Ç–æ–≤–∞—Ä—ã/–≤–∞—Ä–∏–∞–Ω—Ç—ã —Å —Ü–µ–Ω–∞–º–∏
   */
  async getAllPricesWithPagination(token, entityType = 'product') {
    const allItems = [];
    let offset = 0;
    const limit = 1000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –ú–æ–π–°–∫–ª–∞–¥

    try {
      while (true) {
        let items;
        
        if (entityType === 'variant') {
          items = await this.getVariantPrices(token, limit, offset);
        } else {
          items = await this.getProductPrices(token, limit, offset);
        }

        if (!items || items.length === 0) {
          break; // –ë–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
        }

        allItems.push(...items);
        
        if (items.length < limit) {
          break; // –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        }

        offset += limit;
      }

      return allItems;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ü–µ–Ω ${entityType} —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π:`, error.message);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∏—Ö href
   * @param {string} token - –¢–æ–∫–µ–Ω –ú–æ–π–°–∫–ª–∞–¥
   * @param {Array} productHrefs - –ú–∞—Å—Å–∏–≤ href —Ç–æ–≤–∞—Ä–æ–≤
   * @returns {Promise<Object>} –û–±—ä–µ–∫—Ç —Å —Ü–µ–Ω–∞–º–∏ –ø–æ href
   */
  async getPricesByHrefs(token, productHrefs) {
    const prices = {};
    
    try {
      console.log(`üîç –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è ${productHrefs.length} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ href...`);
      console.log(`üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω: ${token ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
      
      for (let i = 0; i < productHrefs.length; i++) {
        const href = productHrefs[i];
        console.log(`  üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä ${i + 1}/${productHrefs.length}: ${href}`);
        
        try {
          console.log(`  üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ú–æ–π–°–∫–ª–∞–¥: ${href}`);
          
          const response = await axios.get(href, {
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json'
            }
          });

          console.log(`  ‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ú–æ–π–°–∫–ª–∞–¥, —Å—Ç–∞—Ç—É—Å: ${response.status}`);
          
          const product = response.data;
          console.log(`  üìä –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã, salePrices: ${product.salePrices ? product.salePrices.length : 0} —Ü–µ–Ω`);
          
          const salePrice = this.extractSalePrice(product.salePrices);
          console.log(`  üí∞ –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ${salePrice}`);
          
          if (salePrice !== null) {
            prices[href] = salePrice;
            console.log(`  ‚úÖ –¶–µ–Ω–∞ ${salePrice} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è href: ${href}`);
          } else {
            console.log(`  ‚ö†Ô∏è –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è href: ${href}`);
          }
        } catch (error) {
          console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–ª—è ${href}:`, error.message);
          if (error.response) {
            console.error(`  üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${error.response.status}`);
            console.error(`  üìÑ –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:`, error.response.data);
          }
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
        }
      }

      console.log(`üìä –ò—Ç–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —Ü–µ–Ω: ${Object.keys(prices).length}`);
      return prices;
    } catch (error) {
      console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω –ø–æ href:', error.message);
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.stack);
      throw error;
    }
  }
}

module.exports = MoySkladPriceService;
