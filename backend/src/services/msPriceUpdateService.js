console.log('üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è MsPriceUpdateService...');
const Product = require('../models/Product');
console.log('‚úÖ Product –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');
const MoySkladPriceService = require('./moySkladPriceService');
console.log('‚úÖ MoySkladPriceService –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');
console.log('üì¶ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω');

class MsPriceUpdateService {
  constructor() {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MsPriceUpdateService...');
    
    try {
      this.moySkladService = new MoySkladPriceService();
      console.log('‚úÖ MoySkladPriceService —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ MoySkladPriceService:', error.message);
      throw error;
    }
    
    console.log('‚úÖ MsPriceUpdateService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–Ω—ã –ú–æ–π–°–∫–ª–∞–¥ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
   * @param {string} integrationId - ID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
   * @param {string} msToken - –¢–æ–∫–µ–Ω –ú–æ–π–°–∫–ª–∞–¥
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  async updateAllPrices(integrationId, msToken) {
    try {
      console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –ú–æ–π–°–∫–ª–∞–¥ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${integrationId}`);
      console.log(`üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –ú–æ–π–°–∫–ª–∞–¥: ${msToken ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
      console.log(`üîç –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${integrationId}...`);
      const products = await Product.find({ integrationLink: integrationId });
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products ? products.length : 0}`);
      
      if (!products || products.length === 0) {
        console.log(`‚ÑπÔ∏è –¢–æ–≤–∞—Ä—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${integrationId} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
        return {
          success: false,
          message: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–∞–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
        };
      }

      console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É ${products.length} —Ç–æ–≤–∞—Ä–æ–≤...`);

      let updatedCount = 0;
      let errorCount = 0;
      const errors = [];

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
      for (let i = 0; i < products.length; i++) {
        const product = products[i];
        try {
          console.log(`üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä ${i + 1}/${products.length}: ${product.nmID || '–ë–µ–∑ nmID'}`);
          const updateResult = await this.updateProductPrices(product, msToken);
          if (updateResult.success) {
            updatedCount++;
            console.log(`‚úÖ –¢–æ–≤–∞—Ä ${product.nmID || '–ë–µ–∑ nmID'} –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
          } else {
            errorCount++;
            console.log(`‚ùå –¢–æ–≤–∞—Ä ${product.nmID || '–ë–µ–∑ nmID'}: ${updateResult.message}`);
            errors.push({
              productId: product._id,
              nmID: product.nmID,
              error: updateResult.message
            });
          }
        } catch (error) {
          errorCount++;
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞ ${product.nmID || '–ë–µ–∑ nmID'}:`, error.message);
          errors.push({
            productId: product._id,
            nmID: product.nmID,
            error: error.message
          });
        }
      }

      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${updatedCount} –æ–±–Ω–æ–≤–ª–µ–Ω–æ, ${errorCount} –æ—à–∏–±–æ–∫, –≤—Å–µ–≥–æ ${products.length}`);

      return {
        success: true,
        updatedCount,
        errorCount,
        totalProducts: products.length,
        errors
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω –ú–æ–π–°–∫–ª–∞–¥:', error.message);
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.stack);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${error.message}`
      };
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–Ω—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
   * @param {Object} product - –¢–æ–≤–∞—Ä –∏–∑ –ë–î
   * @param {string} msToken - –¢–æ–∫–µ–Ω –ú–æ–π–°–∫–ª–∞–¥
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  async updateProductPrices(product, msToken) {
    try {
      console.log(`üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä: ${product.nmID || '–ë–µ–∑ nmID'}, —Ä–∞–∑–º–µ—Ä–æ–≤: ${product.sizes ? product.sizes.length : 0}`);
      
      if (!product.sizes || product.sizes.length === 0) {
        console.log(`‚ÑπÔ∏è –£ —Ç–æ–≤–∞—Ä–∞ ${product.nmID || '–ë–µ–∑ nmID'} –Ω–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤`);
        return {
          success: false,
          message: '–£ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤'
        };
      }

      let hasUpdates = false;
      const updateData = {};

      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º ${product.sizes.length} —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–æ–≤–∞—Ä–∞...`);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞
      for (let i = 0; i < product.sizes.length; i++) {
        const size = product.sizes[i];
        console.log(`  üìè –†–∞–∑–º–µ—Ä ${i + 1}: ${size.techSize || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}, ms_href: ${size.ms_href ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}, —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${size.priceMS || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`);
        
        if (!size.ms_href) {
          console.log(`  ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–º–µ—Ä ${size.techSize || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} - –Ω–µ—Ç ms_href`);
          continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –±–µ–∑ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ú–æ–π–°–∫–ª–∞–¥
        }

        try {
          console.log(`  üîç –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ ${size.techSize || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} –ø–æ href: ${size.ms_href}`);
          
          // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞/–≤–∞—Ä–∏–∞–Ω—Ç–∞
          const prices = await this.moySkladService.getPricesByHrefs(msToken, [size.ms_href]);
          console.log(`  üìä –ü–æ–ª—É—á–µ–Ω—ã —Ü–µ–Ω—ã:`, prices);
          
          if (prices[size.ms_href]) {
            const msPrice = prices[size.ms_href];
            console.log(`  üí∞ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –ú–æ–π–°–∫–ª–∞–¥: ${msPrice}, —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –≤ –ë–î: ${size.priceMS || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ —Ä–∞–∑–º–µ—Ä–µ
            if (size.priceMS !== msPrice) {
              updateData[`sizes.${i}.priceMS`] = msPrice;
              hasUpdates = true;
              console.log(`  ‚úÖ –¶–µ–Ω–∞ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ ${size.techSize || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å ${size.priceMS || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'} –Ω–∞ ${msPrice}`);
            } else {
              console.log(`  ‚ÑπÔ∏è –¶–µ–Ω–∞ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ ${size.techSize || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞: ${msPrice}`);
            }
          } else {
            console.log(`  ‚ö†Ô∏è –¶–µ–Ω–∞ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ ${size.techSize || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ú–æ–π–°–∫–ª–∞–¥`);
          }
        } catch (error) {
          console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ ${size.techSize || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}:`, error.message);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
        }
      }

      // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
      if (hasUpdates) {
        console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ë–î:`, updateData);
        await Product.findByIdAndUpdate(product._id, updateData);
        console.log(`‚úÖ –¶–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ ${product.nmID || '–ë–µ–∑ nmID'} –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –ë–î`);
        return {
          success: true,
          message: '–¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
          updates: updateData
        };
      } else {
        console.log(`‚ÑπÔ∏è –¶–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ ${product.nmID || '–ë–µ–∑ nmID'} —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã`);
        return {
          success: true,
          message: '–¶–µ–Ω—ã —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã'
        };
      }

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω —Ç–æ–≤–∞—Ä–∞ ${product.nmID || '–ë–µ–∑ nmID'}:`, error.message);
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.stack);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${error.message}`
      };
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–Ω—ã –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ–¥–Ω–∏–º —Ä–∞–∑–º–µ—Ä–æ–º (—Ç–∏–ø product)
   * @param {string} integrationId - ID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
   * @param {string} msToken - –¢–æ–∫–µ–Ω –ú–æ–π–°–∫–ª–∞–¥
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  async updateSingleSizeProductPrices(integrationId, msToken) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ú–æ–π–°–∫–ª–∞–¥
      const msProducts = await this.moySkladService.getAllPricesWithPagination(msToken, 'product');
      
      // –°–æ–∑–¥–∞–µ–º Map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ href
      const msPricesMap = new Map();
      msProducts.forEach(product => {
        if (product.meta && product.meta.href) {
          const salePrice = this.moySkladService.extractSalePrice(product.salePrices);
          if (salePrice !== null) {
            msPricesMap.set(product.meta.href, salePrice);
          }
        }
      });

      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –æ–¥–Ω–∏–º —Ä–∞–∑–º–µ—Ä–æ–º –∏–∑ –ë–î
      const products = await Product.find({ 
        integrationLink: integrationId,
        'sizes.1': { $exists: false } // –¢–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å –æ–¥–Ω–∏–º —Ä–∞–∑–º–µ—Ä–æ–º
      });

      let updatedCount = 0;
      let errorCount = 0;

      for (const product of products) {
        try {
          if (product.sizes && product.sizes[0] && product.sizes[0].ms_href) {
            const msPrice = msPricesMap.get(product.sizes[0].ms_href);
            
            if (msPrice && product.sizes[0].priceMS !== msPrice) {
              await Product.findByIdAndUpdate(product._id, {
                'sizes.0.priceMS': msPrice
              });
              updatedCount++;
            }
          }
        } catch (error) {
          errorCount++;
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ ${product.nmID}:`, error.message);
        }
      }

      return {
        success: true,
        updatedCount,
        errorCount,
        totalProducts: products.length
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ–¥–Ω–∏–º —Ä–∞–∑–º–µ—Ä–æ–º:', error);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${error.message}`
      };
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–Ω—ã –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ (—Ç–∏–ø variant)
   * @param {string} integrationId - ID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
   * @param {string} msToken - –¢–æ–∫–µ–Ω –ú–æ–π–°–∫–ª–∞–¥
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  async updateMultiSizeProductPrices(integrationId, msToken) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ü–µ–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑ –ú–æ–π–°–∫–ª–∞–¥
      const msVariants = await this.moySkladService.getAllPricesWithPagination(msToken, 'variant');
      
      // –°–æ–∑–¥–∞–µ–º Map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ href
      const msPricesMap = new Map();
      msVariants.forEach(variant => {
        if (variant.meta && variant.meta.href) {
          const salePrice = this.moySkladService.extractSalePrice(variant.salePrices);
          if (salePrice !== null) {
            msPricesMap.set(variant.meta.href, salePrice);
          }
        }
      });

      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∏–∑ –ë–î
      const products = await Product.find({ 
        integrationLink: integrationId,
        'sizes.1': { $exists: true } // –¢–æ–≤–∞—Ä—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
      });

      let updatedCount = 0;
      let errorCount = 0;

      for (const product of products) {
        try {
          if (product.sizes && product.sizes.length > 1) {
            let hasUpdates = false;
            const updateData = {};

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ä–∞–∑–º–µ—Ä
            for (let i = 0; i < product.sizes.length; i++) {
              const size = product.sizes[i];
              
              if (size.ms_href) {
                const msPrice = msPricesMap.get(size.ms_href);
                
                if (msPrice && size.priceMS !== msPrice) {
                  updateData[`sizes.${i}.priceMS`] = msPrice;
                  hasUpdates = true;
                }
              }
            }

            // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            if (hasUpdates) {
              await Product.findByIdAndUpdate(product._id, updateData);
              updatedCount++;
            }
          }
        } catch (error) {
          errorCount++;
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ ${product.nmID}:`, error.message);
        }
      }

      return {
        success: true,
        updatedCount,
        errorCount,
        totalProducts: products.length
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏:', error);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${error.message}`
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ü–µ–Ω–∞–º –ú–æ–π–°–∫–ª–∞–¥
   * @param {string} integrationId - ID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  async getPriceStats(integrationId) {
    try {
      const products = await Product.find({ integrationLink: integrationId });
      
      let totalSizes = 0;
      let sizesWithMsPrices = 0;
      let sizesWithoutMsPrices = 0;

      products.forEach(product => {
        if (product.sizes) {
          product.sizes.forEach(size => {
            totalSizes++;
            if (size.priceMS && size.priceMS > 0) {
              sizesWithMsPrices++;
            } else {
              sizesWithoutMsPrices++;
            }
          });
        }
      });

      return {
        success: true,
        totalProducts: products.length,
        totalSizes,
        sizesWithMsPrices,
        sizesWithoutMsPrices,
        priceCoverage: totalSizes > 0 ? (sizesWithMsPrices / totalSizes * 100).toFixed(2) : 0
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ü–µ–Ω:', error);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`
      };
    }
  }
}

module.exports = MsPriceUpdateService;
