const axios = require('axios');
const Product = require('../models/Product');
const IntegrationLink = require('../models/IntegrationLink');
const WbCabinet = require('../models/WbCabinet');

class WbPriceService {
  constructor() {
    this.baseUrl = 'https://discounts-prices-api.wildberries.ru/api/v2';
    this.timeout = 30000; // 30 —Å–µ–∫—É–Ω–¥
    this.batchSize = 1000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è WB API
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω —Å WB API –¥–ª—è –≤—Å–µ—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤
  async getPricesForProducts(limit = 100, offset = 0) {
    try {
      console.log('üöÄ –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –¥–ª—è –≤—Å–µ—Ö WB –∫–∞–±–∏–Ω–µ—Ç–æ–≤...');
      
      // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ wbCabinet ID –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤
      const uniqueCabinetIds = await Product.distinct('wbCabinet');
      console.log(`üîç –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö wbCabinet ID –≤ —Ç–æ–≤–∞—Ä–∞—Ö: ${uniqueCabinetIds.length}`);
      
      if (uniqueCabinetIds.length === 0) {
        throw new Error('–í —Ç–æ–≤–∞—Ä–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ WB –∫–∞–±–∏–Ω–µ—Ç—ã');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–∞–±–∏–Ω–µ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö ID
      const wbCabinets = await WbCabinet.find({ 
        _id: { $in: uniqueCabinetIds },
        token: { $exists: true, $ne: '' }
      }).select('+token');
      
      console.log(`üè¢ –ù–∞–π–¥–µ–Ω–æ WB –∫–∞–±–∏–Ω–µ—Ç–æ–≤ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: ${wbCabinets.length}`);
      
      if (wbCabinets.length === 0) {
        throw new Error('–í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã –Ω–µ –∏–º–µ—é—Ç —Ç–æ–∫–µ–Ω–æ–≤');
      }
      
      // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
      wbCabinets.forEach(cabinet => {
        console.log(`   - ${cabinet.name} (ID: ${cabinet._id}) - –¢–æ–∫–µ–Ω: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
      });

      let totalUpdated = 0;
      let totalErrors = 0;
      const results = [];

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π WB –∫–∞–±–∏–Ω–µ—Ç
      for (const cabinet of wbCabinets) {
        try {
          console.log(`\nüè¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–±–∏–Ω–µ—Ç–∞: ${cabinet.name} (ID: ${cabinet._id})`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∫–∞–±–∏–Ω–µ—Ç–∞
          if (!cabinet.token || cabinet.token.trim() === '') {
            console.log(`‚ö†Ô∏è –î–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinet.name} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            results.push({
              cabinetId: cabinet._id,
              cabinetName: cabinet.name,
              totalProducts: 0,
              updated: 0,
              errors: 0,
              skipped: true,
              reason: '–¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
            });
            continue;
          }
          
          // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
          const cabinetProducts = await this.getProductsForCabinet(cabinet._id);
          
          if (cabinetProducts.length === 0) {
            console.log(`‚ö†Ô∏è –î–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinet.name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤`);
            results.push({
              cabinetId: cabinet._id,
              cabinetName: cabinet.name,
              totalProducts: 0,
              updated: 0,
              errors: 0,
              skipped: true,
              reason: '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
            });
            continue;
          }

          console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinet.name}: ${cabinetProducts.length}`);

          // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
          const cabinetResult = await this.updatePricesForCabinet(cabinet, cabinetProducts, limit, offset);
          
          totalUpdated += cabinetResult.updated;
          totalErrors += cabinetResult.errors;
          
          results.push({
            cabinetId: cabinet._id,
            cabinetName: cabinet.name,
            totalProducts: cabinetProducts.length,
            updated: cabinetResult.updated,
            errors: cabinetResult.errors
          });

        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinet.name}:`, error.message);
          totalErrors += 1;
          
          results.push({
            cabinetId: cabinet._id,
            cabinetName: cabinet.name,
            totalProducts: 0,
            updated: 0,
            errors: 1,
            error: error.message
          });
        }

        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞–±–∏–Ω–µ—Ç–∞–º–∏
        await this.delay(2000);
      }

      const skippedCabinets = results.filter(r => r.skipped).length;
      const processedCabinets = results.filter(r => !r.skipped).length;
      
      return {
        success: true,
        totalCabinets: wbCabinets.length,
        processedCabinets,
        skippedCabinets,
        totalUpdated,
        totalErrors,
        results
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ getPricesForProducts:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ WB –∫–∞–±–∏–Ω–µ—Ç–∞
  async getProductsForCabinet(cabinetId) {
    try {
      console.log(`üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinetId}...`);
      
      // –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞–ø—Ä—è–º—É—é –ø–æ –ø–æ–ª—é wbCabinet
      const products = await Product.find({ wbCabinet: cabinetId });
      console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ wbCabinet: ${products.length}`);

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—â–µ–º —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ integrationLink
      const integrationLinks = await IntegrationLink.find({ wbCabinet: cabinetId });
      console.log(`üîó –ù–∞–π–¥–µ–Ω–æ integrationLinks: ${integrationLinks.length}`);
      
      if (integrationLinks.length > 0) {
        const integrationLinkIds = integrationLinks.map(link => link._id);
        const productsByIntegrationLink = await Product.find({ 
          integrationLink: { $in: integrationLinkIds } 
        });
        console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ integrationLink: ${productsByIntegrationLink.length}`);
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        const allProducts = [...products, ...productsByIntegrationLink];
        const uniqueProducts = allProducts.filter((product, index, self) => 
          index === self.findIndex(p => p._id.toString() === product._id.toString())
        );
        
        console.log(`üì¶ –ò—Ç–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: ${uniqueProducts.length}`);
        return uniqueProducts;
      }

      return products;

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinetId}:`, error.message);
      return [];
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ WB –∫–∞–±–∏–Ω–µ—Ç–∞
  async updatePricesForCabinet(cabinet, products, limit = 100, offset = 0) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∫–∞–±–∏–Ω–µ—Ç–∞
      console.log(`üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinet.name}:`);
      console.log(`   - ID –∫–∞–±–∏–Ω–µ—Ç–∞: ${cabinet._id}`);
      console.log(`   - –¢–æ–∫–µ–Ω: ${cabinet.token ? `"${cabinet.token}"` : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
      console.log(`   - –¢–∏–ø —Ç–æ–∫–µ–Ω–∞: ${typeof cabinet.token}`);
      console.log(`   - –î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞: ${cabinet.token ? cabinet.token.length : 0}`);
      
      if (!cabinet.token || cabinet.token.trim() === '') {
        throw new Error(`–î–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinet.name} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω`);
      }

      if (!products || products.length === 0) {
        return { updated: 0, errors: 0 };
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ nmID –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ WB API
      const nmIDs = products.map(product => product.nmID).filter(Boolean);
      
      if (nmIDs.length === 0) {
        console.log(`‚ö†Ô∏è –î–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinet.name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤–∞–ª–∏–¥–Ω—ã–µ nmID`);
        return { updated: 0, errors: 0 };
      }

      console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ ${nmIDs.length} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinet.name}`);

      let totalUpdated = 0;
      let totalErrors = 0;

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å WB API —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
      console.log(`üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å WB API –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinet.name}...`);
      
      let allWbGoods = [];
      let currentOffset = 0;
      const pageLimit = 1000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      
      while (true) {
        try {
          console.log(`üìÑ –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${Math.floor(currentOffset / pageLimit) + 1} (offset: ${currentOffset})`);
          
          const wbResponse = await this.fetchAllPrices(cabinet.token, pageLimit, currentOffset);
          
          if (wbResponse && wbResponse.listGoods && wbResponse.listGoods.length > 0) {
            allWbGoods = allWbGoods.concat(wbResponse.listGoods);
            console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${wbResponse.listGoods.length}`);
            console.log(`üì¶ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${allWbGoods.length}`);
            
            // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ–º limit, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if (wbResponse.listGoods.length < pageLimit) {
              console.log(`üèÅ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤`);
              break;
            }
            
            currentOffset += pageLimit;
            
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
            await this.delay(1000);
          } else {
            console.log(`‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç WB API –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${Math.floor(currentOffset / pageLimit) + 1}`);
            break;
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${Math.floor(currentOffset / pageLimit) + 1}:`, error.message);
          totalErrors += 1;
          break;
        }
      }
      
      console.log(`üì¶ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å WB API: ${allWbGoods.length}`);
      
      if (allWbGoods.length === 0) {
        console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å WB API –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinet.name}`);
        return { updated: 0, errors: totalErrors };
      }
      
             // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –Ω—É–∂–Ω—ã–º nmID
       const neededNmIDs = new Set(nmIDs);
       console.log(`üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ nmID: ${Array.from(neededNmIDs).slice(0, 10).join(', ')}${neededNmIDs.size > 10 ? '...' : ''}`);
       
       const filteredWbGoods = allWbGoods.filter(good => neededNmIDs.has(good.nmID));
       
       console.log(`üîç –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ ${nmIDs.length} –Ω—É–∂–Ω—ã—Ö: ${filteredWbGoods.length}`);
       
       if (filteredWbGoods.length > 0) {
         console.log(`üìã –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:`);
         filteredWbGoods.forEach((good, index) => {
           console.log(`   ${index + 1}. nmID: ${good.nmID}, —Ä–∞–∑–º–µ—Ä–æ–≤: ${good.sizes ? good.sizes.length : 0}`);
         });
         
         // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –≤ –ë–î –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
         const updateResult = await this.updateProductPrices(filteredWbGoods);
         totalUpdated += updateResult.updated;
         totalErrors += updateResult.errors;
       } else {
         console.log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω`);
         console.log(`üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ nmID –≤ WB API: ${allWbGoods.slice(0, 10).map(g => g.nmID).join(', ')}${allWbGoods.length > 10 ? '...' : ''}`);
       }

      return { updated: totalUpdated, errors: totalErrors };

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinet.name}:`, error.message);
      throw error;
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞—Ç—á–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞ nmID
  createBatches(nmIDs) {
    const batches = [];
    for (let i = 0; i < nmIDs.length; i += this.batchSize) {
      batches.push(nmIDs.slice(i, i + this.batchSize));
    }
    return batches;
  }

  // –ó–∞–ø—Ä–æ—Å –∫ WB API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
  async fetchAllPrices(token, limit = 1000, offset = 0) {
    try {
      if (!token) {
        throw new Error('–¢–æ–∫–µ–Ω WB –∫–∞–±–∏–Ω–µ—Ç–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
      }

      const url = `${this.baseUrl}/list/goods/filter`;
      
      console.log(`üì° –ó–∞–ø—Ä–æ—Å –∫ WB API (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${Math.floor(offset / limit) + 1}):`);
      console.log(`   - URL: ${url}`);
      console.log(`   - –ú–µ—Ç–æ–¥: GET`);
      console.log(`   - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: limit=${limit}, offset=${offset}`);
      console.log(`   - –¢–æ–∫–µ–Ω: ${token.substring(0, 20)}...`);
      
      const requestConfig = {
        params: {
          limit,
          offset
        },
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        timeout: this.timeout
      };
      
      const response = await axios.get(url, requestConfig);

      if (response.status === 200 && response.data) {
        console.log(`‚úÖ –û—Ç–≤–µ—Ç –æ—Ç WB API (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${Math.floor(offset / limit) + 1}):`);
        console.log(`   - –°—Ç–∞—Ç—É—Å: ${response.status}`);
        console.log(`   - –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:`, JSON.stringify(response.data, null, 2));
        
        if (response.data.listGoods) {
          console.log(`   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ: ${response.data.listGoods.length}`);
        } else {
          console.log(`   - –ü–æ–ª–µ listGoods –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ`);
          console.log(`   - –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è:`, Object.keys(response.data));
          
          // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—è
          if (response.data.data && response.data.data.listGoods) {
            console.log(`   - –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ data.listGoods`);
            return response.data;
          }
          
          if (response.data.goods) {
            console.log(`   - –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ goods`);
            return { listGoods: response.data.goods };
          }
          
          if (response.data.items) {
            console.log(`   - –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ items`);
            return { listGoods: response.data.items };
          }
        }
        return response.data;
      } else {
        throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç WB API: ${response.status}`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ WB API (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${Math.floor(offset / limit) + 1}):`);
      if (error.response) {
        console.error(`   - –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
        console.error(`   - –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:`, error.response.data);
      } else {
        console.error(`   - –û—à–∏–±–∫–∞: ${error.message}`);
      }
      throw error;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î
  async updateProductPrices(wbGoodsList) {
    let updated = 0;
    let errors = 0;

    console.log(`üîÑ –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –¥–ª—è ${wbGoodsList.length} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ WB API...`);

    for (const wbGood of wbGoodsList) {
      try {
        if (!wbGood.nmID || !wbGood.sizes || !Array.isArray(wbGood.sizes)) {
          console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö`);
          continue;
        }

        console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞ nmID: ${wbGood.nmID}, —Ä–∞–∑–º–µ—Ä–æ–≤: ${wbGood.sizes.length}`);

        // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –ø–æ nmID
        const product = await Product.findOne({ nmID: wbGood.nmID });
        if (!product) {
          console.log(`‚ö†Ô∏è –¢–æ–≤–∞—Ä —Å nmID ${wbGood.nmID} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î`);
          continue;
        }

        console.log(`üì¶ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: ${product.title || product.nmID} (ID: ${product._id})`);
        console.log(`üìè –†–∞–∑–º–µ—Ä–æ–≤ –≤ –ë–î: ${product.sizes.length}`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        let needsUpdate = false;
        let updatedSizesCount = 0;
        const updatedSizes = product.sizes.map(size => {
          // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–º–µ—Ä –≤ –æ—Ç–≤–µ—Ç–µ WB –ø–æ chrtID
          const wbSize = wbGood.sizes.find(ws => ws.sizeID === size.chrtID);
          
          if (wbSize) {
            console.log(`   üìè –†–∞–∑–º–µ—Ä chrtID: ${size.chrtID} –Ω–∞–π–¥–µ–Ω –≤ WB API`);
            console.log(`   üí∞ –¶–µ–Ω—ã WB: price=${wbSize.price}, discounted=${wbSize.discountedPrice}, club=${wbSize.clubDiscountedPrice}`);
            
            const updatedSize = { ...size };
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã WB
            if (wbSize.price !== undefined && wbSize.price !== null) {
              updatedSize.priceWB = wbSize.price;
              needsUpdate = true;
            }
            if (wbSize.discountedPrice !== undefined && wbSize.discountedPrice !== null) {
              updatedSize.discountedPriceWB = wbSize.discountedPrice;
              needsUpdate = true;
            }
            if (wbSize.clubDiscountedPrice !== undefined && wbSize.clubDiscountedPrice !== null) {
              updatedSize.clubDiscountedPriceWB = wbSize.clubDiscountedPrice;
              needsUpdate = true;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
            updatedSize.lastPriceUpdate = new Date();
            updatedSizesCount++;
            
            return updatedSize;
          } else {
            console.log(`   ‚ö†Ô∏è –†–∞–∑–º–µ—Ä chrtID: ${size.chrtID} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ WB API`);
            return size;
          }
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ë–î
        if (needsUpdate) {
          await Product.updateOne(
            { _id: product._id },
            { 
              $set: { 
                sizes: updatedSizes,
                lastWbPriceUpdate: new Date()
              } 
            }
          );
          updated++;
          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ü–µ–Ω—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.title || product.nmID} (nmID: ${wbGood.nmID})`);
          console.log(`   üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞–∑–º–µ—Ä–æ–≤: ${updatedSizesCount}/${product.sizes.length}`);
        } else {
          console.log(`‚ÑπÔ∏è –¢–æ–≤–∞—Ä ${product.title || product.nmID} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
        }

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ ${wbGood.nmID}:`, error.message);
        errors++;
      }
    }

    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω: –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${updated}, –æ—à–∏–±–æ–∫: ${errors}`);
    return { updated, errors };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
  async getUpdateStatus() {
    try {
      const lastUpdate = await Product.findOne(
        { lastWbPriceUpdate: { $exists: true } },
        'lastWbPriceUpdate'
      ).sort({ lastWbPriceUpdate: -1 });

      const totalProducts = await Product.countDocuments();
      const productsWithPrices = await Product.countDocuments({ 
        'sizes.priceWB': { $exists: true, $ne: 0 } 
      });

      return {
        lastUpdate: lastUpdate?.lastWbPriceUpdate || null,
        totalProducts,
        productsWithPrices,
        coveragePercentage: totalProducts > 0 ? Math.round((productsWithPrices / totalProducts) * 100) : 0
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ getUpdateStatus:', error);
      throw error;
    }
  }

  // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å WB API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  async getAllWbGoods(token, maxPages = 10) {
    try {
      if (!token) {
        throw new Error('–¢–æ–∫–µ–Ω WB –∫–∞–±–∏–Ω–µ—Ç–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
      }

      console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å WB API (–º–∞–∫—Å–∏–º—É–º ${maxPages} —Å—Ç—Ä–∞–Ω–∏—Ü)...`);
      
      let allWbGoods = [];
      let currentOffset = 0;
      const pageLimit = 1000;
      let pageCount = 0;
      
      while (pageCount < maxPages) {
        try {
          pageCount++;
          console.log(`üìÑ –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageCount} (offset: ${currentOffset})`);
          
          const wbResponse = await this.fetchAllPrices(token, pageLimit, currentOffset);
          
          if (wbResponse && wbResponse.listGoods && wbResponse.listGoods.length > 0) {
            allWbGoods = allWbGoods.concat(wbResponse.listGoods);
            console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${wbResponse.listGoods.length}`);
            console.log(`üì¶ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${allWbGoods.length}`);
            
            // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ–º limit, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if (wbResponse.listGoods.length < pageLimit) {
              console.log(`üèÅ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤`);
              break;
            }
            
            currentOffset += pageLimit;
            
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
            await this.delay(1000);
          } else {
            console.log(`‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç WB API –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageCount}`);
            break;
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageCount}:`, error.message);
          break;
        }
      }
      
      console.log(`üì¶ –ò—Ç–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å WB API: ${allWbGoods.length}`);
      return allWbGoods;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤:', error.message);
      throw error;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ WB –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ ID
  async updatePricesForCabinetById(cabinetId, limit = 100, offset = 0) {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –∫–∞–±–∏–Ω–µ—Ç
      const cabinet = await WbCabinet.findById(cabinetId).select('+token');
      if (!cabinet) {
        throw new Error(`WB –∫–∞–±–∏–Ω–µ—Ç —Å ID ${cabinetId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      if (!cabinet.token) {
        throw new Error(`–î–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinet.name} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω`);
      }

      console.log(`üè¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞: ${cabinet.name}`);

      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
      const cabinetProducts = await this.getProductsForCabinet(cabinet._id);
      
      if (cabinetProducts.length === 0) {
        console.log(`‚ö†Ô∏è –î–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinet.name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤`);
        return {
          success: true,
          cabinetName: cabinet.name,
          totalProducts: 0,
          updated: 0,
          errors: 0
        };
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
      const result = await this.updatePricesForCabinet(cabinet, cabinetProducts, limit, offset);
      
      return {
        success: true,
        cabinetName: cabinet.name,
        totalProducts: cabinetProducts.length,
        ...result
      };

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinetId}:`, error.message);
      throw error;
    }
  }


}

module.exports = new WbPriceService(); 