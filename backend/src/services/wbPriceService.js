const axios = require('axios');
const Product = require('../models/Product');
const IntegrationLink = require('../models/IntegrationLink');
const WbCabinet = require('../models/WbCabinet');

class WbPriceService {
  constructor() {
    this.baseUrl = 'https://discounts-prices-api.wildberries.ru/api/v2';
    this.timeout = 30000; // 30 —Å–µ–∫—É–Ω–¥
    this.batchSize = 1000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è WB API
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω —Å WB API –¥–ª—è –≤—Å–µ—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤
  async getPricesForProducts(limit = 100, offset = 0) {
    try {
      console.log('üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω WB...');
      
      // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ wbCabinet ID –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤
      const uniqueCabinetIds = await Product.distinct('wbCabinet');
      
      if (uniqueCabinetIds.length === 0) {
        throw new Error('–í —Ç–æ–≤–∞—Ä–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ WB –∫–∞–±–∏–Ω–µ—Ç—ã');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–∞–±–∏–Ω–µ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö ID
      const wbCabinets = await WbCabinet.find({ 
        _id: { $in: uniqueCabinetIds },
        token: { $exists: true, $ne: '' }
      }).select('+token');
      
      if (wbCabinets.length === 0) {
        throw new Error('–í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã –Ω–µ –∏–º–µ—é—Ç —Ç–æ–∫–µ–Ω–æ–≤');
      }

      let totalUpdated = 0;
      let totalErrors = 0;
      const results = [];

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π WB –∫–∞–±–∏–Ω–µ—Ç
      for (const cabinet of wbCabinets) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∫–∞–±–∏–Ω–µ—Ç–∞
          if (!cabinet.token || cabinet.token.trim() === '') {
            results.push({
              cabinetId: cabinet._id,
              cabinetName: cabinet.name,
              totalProducts: 0,
              updated: 0,
              errors: 0,
              skipped: true,
              reason: '–¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
            });
            continue;
          }
          
          // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
          const cabinetProducts = await this.getProductsForCabinet(cabinet._id);
          
          if (cabinetProducts.length === 0) {
            results.push({
              cabinetId: cabinet._id,
              cabinetName: cabinet.name,
              totalProducts: 0,
              updated: 0,
              errors: 0,
              skipped: true,
              reason: '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
            });
            continue;
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
          const cabinetResult = await this.updatePricesForCabinet(cabinet, cabinetProducts, limit, offset);
          
          totalUpdated += cabinetResult.updated;
          totalErrors += cabinetResult.errors;
          
          results.push({
            cabinetId: cabinet._id,
            cabinetName: cabinet.name,
            totalProducts: cabinetProducts.length,
            updated: cabinetResult.updated,
            errors: cabinetResult.errors
          });

        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinet.name}:`, error.message);
          totalErrors += 1;
          
          results.push({
            cabinetId: cabinet._id,
            cabinetName: cabinet.name,
            totalProducts: 0,
            updated: 0,
            errors: 1,
            error: error.message
          });
        }

        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞–±–∏–Ω–µ—Ç–∞–º–∏
        await this.delay(2000);
      }

      const skippedCabinets = results.filter(r => r.skipped).length;
      const processedCabinets = results.filter(r => !r.skipped).length;
      
             console.log(`üéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalUpdated}, –æ—à–∏–±–æ–∫: ${totalErrors}`);
       
       return {
         success: true,
         totalCabinets: wbCabinets.length,
         processedCabinets,
         skippedCabinets,
         totalUpdated,
         totalErrors,
         results
       };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ getPricesForProducts:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ WB –∫–∞–±–∏–Ω–µ—Ç–∞
  async getProductsForCabinet(cabinetId) {
    try {
      console.log(`üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinetId}...`);
      
             // –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞–ø—Ä—è–º—É—é –ø–æ –ø–æ–ª—é wbCabinet
       const products = await Product.find({ wbCabinet: cabinetId });
       console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ wbCabinet: ${products.length}`);

       // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—â–µ–º —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ integrationLink
       const integrationLinks = await IntegrationLink.find({ wbCabinet: cabinetId });
       
       if (integrationLinks.length > 0) {
         const integrationLinkIds = integrationLinks.map(link => link._id);
         
         const productsByIntegrationLink = await Product.find({ 
           integrationLink: { $in: integrationLinkIds } 
         });
         console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ integrationLink: ${productsByIntegrationLink.length}`);
         
         // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
         const allProducts = [...products, ...productsByIntegrationLink];
         const uniqueProducts = allProducts.filter((product, index, self) => 
           index === self.findIndex(p => p._id.toString() === product._id.toString())
         );
         
         console.log(`üì¶ –ò—Ç–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: ${uniqueProducts.length}`);
         return uniqueProducts;
       }

       return products;

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinetId}:`, error.message);
      return [];
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ WB –∫–∞–±–∏–Ω–µ—Ç–∞
  async updatePricesForCabinet(cabinet, products, limit = 100, offset = 0) {
    try {
             // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∫–∞–±–∏–Ω–µ—Ç–∞
       if (!cabinet.token || cabinet.token.trim() === '') {
         throw new Error(`–î–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinet.name} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω`);
       }

       if (!products || products.length === 0) {
         return { updated: 0, errors: 0 };
       }

       // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ nmID –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ WB API
       const nmIDs = products.map(product => product.nmID).filter(Boolean);
       
       if (nmIDs.length === 0) {
         console.log(`‚ö†Ô∏è –î–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinet.name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤–∞–ª–∏–¥–Ω—ã–µ nmID`);
         return { updated: 0, errors: 0 };
       }

       let totalUpdated = 0;
       let totalErrors = 0;

       // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å WB API —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
       
       let allWbGoods = [];
       let currentOffset = 0;
       const pageLimit = 1000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
       
       while (true) {
         try {
           const wbResponse = await this.fetchAllPrices(cabinet.token, pageLimit, currentOffset);
           
           // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã
           let goodsList = [];
           if (wbResponse && wbResponse.data && wbResponse.data.listGoods) {
             goodsList = wbResponse.data.listGoods;
           } else if (wbResponse && wbResponse.listGoods) {
             goodsList = wbResponse.listGoods;
           } else if (wbResponse && wbResponse.goods) {
             goodsList = wbResponse.goods;
           } else if (wbResponse && wbResponse.items) {
             goodsList = wbResponse.items;
           }
           
           if (goodsList && goodsList.length > 0) {
             allWbGoods = allWbGoods.concat(goodsList);
             
             // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ–º limit, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
             if (goodsList.length < pageLimit) {
               break;
             }
             
             currentOffset += pageLimit;
             
             // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
             await this.delay(1000);
           } else {
             break;
           }
         } catch (error) {
           console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:`, error.message);
           totalErrors += 1;
           break;
         }
       }
      
      if (allWbGoods.length === 0) {
        return { updated: 0, errors: totalErrors };
      }
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –Ω—É–∂–Ω—ã–º nmID
      const neededNmIDs = new Set(nmIDs);
      const filteredWbGoods = allWbGoods.filter(good => neededNmIDs.has(good.nmID));
      
      if (filteredWbGoods.length > 0) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –≤ –ë–î –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        const updateResult = await this.updateProductPrices(filteredWbGoods);
        totalUpdated += updateResult.updated;
        totalErrors += updateResult.errors;
      }
       
       return { updated: totalUpdated, errors: totalErrors };

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinet.name}:`, error.message);
      throw error;
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞—Ç—á–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞ nmID
  createBatches(nmIDs) {
    const batches = [];
    for (let i = 0; i < nmIDs.length; i += this.batchSize) {
      batches.push(nmIDs.slice(i, i + this.batchSize));
    }
    return batches;
  }

  // –ó–∞–ø—Ä–æ—Å –∫ WB API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
  async fetchAllPrices(token, limit = 1000, offset = 0) {
    try {
      if (!token) {
        throw new Error('–¢–æ–∫–µ–Ω WB –∫–∞–±–∏–Ω–µ—Ç–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
      }

      const url = `${this.baseUrl}/list/goods/filter`;
      
             const requestConfig = {
         params: {
           limit,
           offset
         },
         headers: {
           'Authorization': `Bearer ${token}`,
           'Content-Type': 'application/json'
         },
         timeout: this.timeout
       };
       
       const response = await axios.get(url, requestConfig);

       if (response.status === 200 && response.data) {
         // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
         if (response.data.data && response.data.data.listGoods) {
           return response.data;
         } else if (response.data.listGoods) {
           return response.data;
         } else if (response.data.goods) {
           return { listGoods: response.data.goods };
         } else if (response.data.items) {
           return { listGoods: response.data.items };
         } else {
           return response.data;
         }
       } else {
         throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç WB API: ${response.status}`);
       }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ WB API (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${Math.floor(offset / limit) + 1}):`);
      if (error.response) {
        console.error(`   - –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
        console.error(`   - –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:`, error.response.data);
      } else {
        console.error(`   - –û—à–∏–±–∫–∞: ${error.message}`);
      }
      throw error;
    }
  }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î
  async updateProductPrices(wbGoodsList) {
    let updated = 0;
    let errors = 0;

    console.log(`üîÑ –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –¥–ª—è ${wbGoodsList.length} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ WB API...`);

    for (const wbGood of wbGoodsList) {
      try {
        if (!wbGood.nmID || !wbGood.sizes || !Array.isArray(wbGood.sizes)) {
          console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö`);
          continue;
        }

        // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –ø–æ nmID
        const product = await Product.findOne({ nmID: wbGood.nmID });
        if (!product) {
          console.log(`‚ö†Ô∏è –¢–æ–≤–∞—Ä —Å nmID ${wbGood.nmID} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î`);
          continue;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        let needsUpdate = false;
        let updatedSizesCount = 0;
        const updatedSizes = product.sizes.map(size => {
          // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–º–µ—Ä –≤ –æ—Ç–≤–µ—Ç–µ WB –ø–æ chrtID
          const wbSize = wbGood.sizes.find(ws => ws.sizeID === size.chrtID);
          
          if (wbSize) {
            const updatedSize = { ...size };
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã WB
            if (wbSize.price !== undefined && wbSize.price !== null) {
              updatedSize.priceWB = wbSize.price;
              needsUpdate = true;
            }
            if (wbSize.discountedPrice !== undefined && wbSize.discountedPrice !== null) {
              updatedSize.discountedPriceWB = wbSize.discountedPrice;
              needsUpdate = true;
            }
            if (wbSize.clubDiscountedPrice !== undefined && wbSize.clubDiscountedPrice !== null) {
              updatedSize.clubDiscountedPriceWB = wbSize.clubDiscountedPrice;
              needsUpdate = true;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
            updatedSize.lastPriceUpdate = new Date();
            updatedSizesCount++;
            
            return updatedSize;
          } else {
            return size;
          }
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ë–î
        if (needsUpdate) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤
          const updateOperations = [];
          
          updatedSizes.forEach((size, index) => {
            if (size.priceWB !== undefined || size.discountedPriceWB !== undefined || size.clubDiscountedPriceWB !== undefined || size.lastPriceUpdate !== undefined) {
              updateOperations.push({
                $set: {
                  [`sizes.${index}.priceWB`]: size.priceWB,
                  [`sizes.${index}.discountedPriceWB`]: size.discountedPriceWB,
                  [`sizes.${index}.clubDiscountedPriceWB`]: size.clubDiscountedPriceWB,
                  [`sizes.${index}.lastPriceUpdate`]: size.lastPriceUpdate,
                  lastWbPriceUpdate: new Date()
                }
              });
            }
          });
          
          let updateResult;
          if (updateOperations.length > 0) {
            // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É
            for (const operation of updateOperations) {
              updateResult = await Product.updateOne(
                { _id: product._id },
                operation
              );
            }
          } else {
            // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
            updateResult = await Product.updateOne(
              { _id: product._id },
              { 
                $set: { 
                  sizes: updatedSizes,
                  lastWbPriceUpdate: new Date()
                } 
              }
            );
          }
        
          if (updateResult.modifiedCount > 0) {
            updated++;
          }
        }

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ ${wbGood.nmID}:`, error.message);
        errors++;
      }
    }

    return { updated, errors };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
  async getUpdateStatus() {
    try {
      const lastUpdate = await Product.findOne(
        { lastWbPriceUpdate: { $exists: true } },
        'lastWbPriceUpdate'
      ).sort({ lastWbPriceUpdate: -1 });

      const totalProducts = await Product.countDocuments();
      const productsWithPrices = await Product.countDocuments({ 
        'sizes.priceWB': { $exists: true, $ne: 0 } 
      });

      return {
        lastUpdate: lastUpdate?.lastWbPriceUpdate || null,
        totalProducts,
        productsWithPrices,
        coveragePercentage: totalProducts > 0 ? Math.round((productsWithPrices / totalProducts) * 100) : 0
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ getUpdateStatus:', error);
      throw error;
    }
  }

  // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å WB API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  async getAllWbGoods(token, maxPages = 10) {
    try {
      if (!token) {
        throw new Error('–¢–æ–∫–µ–Ω WB –∫–∞–±–∏–Ω–µ—Ç–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
      }

      console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å WB API (–º–∞–∫—Å–∏–º—É–º ${maxPages} —Å—Ç—Ä–∞–Ω–∏—Ü)...`);
      
      let allWbGoods = [];
      let currentOffset = 0;
      const pageLimit = 1000;
      let pageCount = 0;
      
             while (pageCount < maxPages) {
         try {
           pageCount++;
           
           const wbResponse = await this.fetchAllPrices(token, pageLimit, currentOffset);
           
           if (wbResponse && wbResponse.listGoods && wbResponse.listGoods.length > 0) {
             allWbGoods = allWbGoods.concat(wbResponse.listGoods);
             
             // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ–º limit, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
             if (wbResponse.listGoods.length < pageLimit) {
               break;
             }
             
             currentOffset += pageLimit;
             
             // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
             await this.delay(1000);
           } else {
             break;
           }
         } catch (error) {
           console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:`, error.message);
           break;
         }
       }
      
      console.log(`üì¶ –ò—Ç–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å WB API: ${allWbGoods.length}`);
      return allWbGoods;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤:', error.message);
      throw error;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ WB –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ ID
  async updatePricesForCabinetById(cabinetId, limit = 100, offset = 0) {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –∫–∞–±–∏–Ω–µ—Ç
      const cabinet = await WbCabinet.findById(cabinetId).select('+token');
      if (!cabinet) {
        throw new Error(`WB –∫–∞–±–∏–Ω–µ—Ç —Å ID ${cabinetId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      if (!cabinet.token) {
        throw new Error(`–î–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinet.name} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω`);
      }

             // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
       const cabinetProducts = await this.getProductsForCabinet(cabinet._id);
       
       if (cabinetProducts.length === 0) {
         return {
           success: true,
           cabinetName: cabinet.name,
           totalProducts: 0,
           updated: 0,
           errors: 0
         };
       }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
      const result = await this.updatePricesForCabinet(cabinet, cabinetProducts, limit, offset);
      
      return {
        success: true,
        cabinetName: cabinet.name,
        totalProducts: cabinetProducts.length,
        ...result
      };

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinetId}:`, error.message);
      throw error;
    }
  }


}

module.exports = new WbPriceService(); 