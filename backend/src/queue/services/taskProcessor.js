const queueService = require('./queueService');
const wbPriceService = require('../../services/wbPriceService');
const wbRemainsService = require('../../services/wbRemainsService');
const msPriceUpdateService = require('../../services/msPriceUpdateService');
const msStockService = require('../../services/moySkladStockService');
const wbStatisticsService = require('../../services/wbStatisticsService');
const syncService = require('../../services/syncService');

/**
 * –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∑–∞–¥–∞—á –æ—á–µ—Ä–µ–¥–∏
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á
 */
class TaskProcessor {
  constructor() {
    this.processors = {
      'WB_PRICE_UPDATE': this.processWbPriceUpdate.bind(this),
      'WB_REMAINS_UPDATE': this.processWbRemainsUpdate.bind(this),
      'MS_PRICE_UPDATE': this.processMsPriceUpdate.bind(this),
      'MS_STOCK_UPDATE': this.processMsStockUpdate.bind(this),
      'WB_STATISTICS_UPDATE': this.processWbStatisticsUpdate.bind(this),
      'SYNC_PRODUCTS': this.processSyncProducts.bind(this)
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏
   * @param {Object} task - –ó–∞–¥–∞—á–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
   */
  async processTask(task) {
    try {
      console.log(`üîÑ [TASK_PROCESSOR] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏ ${task._id} —Ç–∏–ø–∞ ${task.type}`);
      
      const processor = this.processors[task.type];
      if (!processor) {
        throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏: ${task.type}`);
      }

      const result = await processor(task);
      
      await queueService.completeTask(task._id, result);
      console.log(`‚úÖ [TASK_PROCESSOR] –ó–∞–¥–∞—á–∞ ${task._id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);

      return result;

    } catch (error) {
      console.error(`‚ùå [TASK_PROCESSOR] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ ${task._id}:`, error.message);
      await queueService.failTask(task._id, error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω WB
   * @param {Object} task - –ó–∞–¥–∞—á–∞
   */
  async processWbPriceUpdate(task) {
    const { cabinetId, userId, limit = 100, offset = 0 } = task.data;
    
    console.log(`üí∞ [TASK_PROCESSOR] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω WB –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinetId}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    const result = await wbPriceService.updatePricesForCabinetById(cabinetId, limit, offset);
    
    return {
      type: 'WB_PRICE_UPDATE',
      cabinetId,
      userId,
      result
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ WB
   * @param {Object} task - –ó–∞–¥–∞—á–∞
   */
  async processWbRemainsUpdate(task) {
    const { cabinetId, userId } = task.data;
    
    console.log(`üì¶ [TASK_PROCESSOR] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ WB –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinetId}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–±–∏–Ω–µ—Ç–∞
    const WbCabinet = require('../../models/WbCabinet');
    const cabinet = await WbCabinet.findById(cabinetId).select('+token');
    
    if (!cabinet || !cabinet.token) {
      throw new Error(`–ö–∞–±–∏–Ω–µ—Ç ${cabinetId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç —Ç–æ–∫–µ–Ω–∞`);
    }
    
    const result = await wbRemainsService.updateFbyRemains(cabinet.token, cabinetId, userId);
    
    return {
      type: 'WB_REMAINS_UPDATE',
      cabinetId,
      userId,
      result
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –ú–°
   * @param {Object} task - –ó–∞–¥–∞—á–∞
   */
  async processMsPriceUpdate(task) {
    const { integrationId, userId } = task.data;
    
    console.log(`üí∞ [TASK_PROCESSOR] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –ú–° –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${integrationId}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    const IntegrationLink = require('../../models/IntegrationLink');
    const integration = await IntegrationLink.findById(integrationId)
      .populate('storage', 'token');
    
    if (!integration || !integration.storage || !integration.storage.token) {
      throw new Error(`–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ${integrationId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç —Ç–æ–∫–µ–Ω–∞`);
    }
    
    const result = await msPriceUpdateService.updateAllPrices(integrationId, integration.storage.token);
    
    return {
      type: 'MS_PRICE_UPDATE',
      integrationId,
      userId,
      result
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –ú–°
   * @param {Object} task - –ó–∞–¥–∞—á–∞
   */
  async processMsStockUpdate(task) {
    const { integrationId, userId } = task.data;
    
    console.log(`üì¶ [TASK_PROCESSOR] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ú–° –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${integrationId}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    const IntegrationLink = require('../../models/IntegrationLink');
    const integration = await IntegrationLink.findById(integrationId)
      .populate('storage', 'token');
    
    if (!integration || !integration.storage || !integration.storage.token) {
      throw new Error(`–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ${integrationId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç —Ç–æ–∫–µ–Ω–∞`);
    }
    
    const result = await msStockService.updateAllStocks(integrationId, integration.storage.token);
    
    return {
      type: 'MS_STOCK_UPDATE',
      integrationId,
      userId,
      result
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ WB
   * @param {Object} task - –ó–∞–¥–∞—á–∞
   */
  async processWbStatisticsUpdate(task) {
    const { cabinetId, userId, dateFrom, dateTo } = task.data;
    
    console.log(`üìä [TASK_PROCESSOR] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ WB –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinetId}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–±–∏–Ω–µ—Ç–∞
    const WbCabinet = require('../../models/WbCabinet');
    const cabinet = await WbCabinet.findById(cabinetId).select('+token');
    
    if (!cabinet || !cabinet.token) {
      throw new Error(`–ö–∞–±–∏–Ω–µ—Ç ${cabinetId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç —Ç–æ–∫–µ–Ω–∞`);
    }
    
    const result = await wbStatisticsService.updateStatistics(cabinet.token, cabinetId, userId, dateFrom, dateTo);
    
    return {
      type: 'WB_STATISTICS_UPDATE',
      cabinetId,
      userId,
      result
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
   * @param {Object} task - –ó–∞–¥–∞—á–∞
   */
  async processSyncProducts(task) {
    const { integrationId, userId } = task.data;
    
    console.log(`üîÑ [TASK_PROCESSOR] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${integrationId}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    const result = await syncService.syncProducts(integrationId, userId);
    
    return {
      type: 'SYNC_PRODUCTS',
      integrationId,
      userId,
      result
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
   */
  getAvailableProcessors() {
    return Object.keys(this.processors);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ç–∏–ø –∑–∞–¥–∞—á–∏
   * @param {string} type - –¢–∏–ø –∑–∞–¥–∞—á–∏
   */
  isSupportedTaskType(type) {
    return type in this.processors;
  }
}

module.exports = new TaskProcessor();
