const QueueTask = require('../models/QueueTask');
const Redis = require('ioredis');

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—á–µ—Ä–µ–¥—è–º–∏ –∑–∞–¥–∞—á
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Redis –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–¥–∞—á–∞–º –∏ MongoDB –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 */
class QueueService {
  constructor() {
    this.redis = null;
    this.isConnected = false;
    this.queues = {
      'WB_PRICE_UPDATE': 'queue:wb:price',
      'WB_REMAINS_UPDATE': 'queue:wb:remains',
      'MS_PRICE_UPDATE': 'queue:ms:price',
      'MS_STOCK_UPDATE': 'queue:ms:stock',
      'WB_STATISTICS_UPDATE': 'queue:wb:statistics',
      'SYNC_PRODUCTS': 'queue:sync:products'
    };
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
   */
  async initialize() {
    try {
      this.redis = new Redis({
        host: process.env.REDIS_HOST || 'localhost',
        port: process.env.REDIS_PORT || 6379,
        password: process.env.REDIS_PASSWORD || null,
        db: process.env.REDIS_DB || 0,
        retryDelayOnFailover: 100,
        maxRetriesPerRequest: 3,
        lazyConnect: true
      });

      this.redis.on('connect', () => {
        console.log('‚úÖ [QUEUE_SERVICE] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        this.isConnected = true;
      });

      this.redis.on('error', (error) => {
        console.error('‚ùå [QUEUE_SERVICE] –û—à–∏–±–∫–∞ Redis:', error.message);
        this.isConnected = false;
      });

      this.redis.on('close', () => {
        console.log('‚ö†Ô∏è [QUEUE_SERVICE] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis –∑–∞–∫—Ä—ã—Ç–æ');
        this.isConnected = false;
      });

      await this.redis.connect();
      return true;
    } catch (error) {
      console.error('‚ùå [QUEUE_SERVICE] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Redis:', error.message);
      this.isConnected = false;
      return false;
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å
   * @param {string} type - –¢–∏–ø –∑–∞–¥–∞—á–∏
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
   */
  async addTask(type, data, userId, options = {}) {
    try {
      if (!this.isConnected) {
        throw new Error('Redis –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ MongoDB
      const task = new QueueTask({
        type,
        data,
        userId,
        priority: options.priority || 5,
        maxAttempts: options.maxAttempts || 3,
        metadata: {
          cabinetName: options.cabinetName,
          integrationName: options.integrationName,
          estimatedDuration: options.estimatedDuration,
          tags: options.tags || []
        }
      });

      await task.save();

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ Redis –æ—á–µ—Ä–µ–¥—å
      const queueName = this.queues[type];
      if (!queueName) {
        throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏: ${type}`);
      }

      const taskData = {
        taskId: task._id.toString(),
        priority: task.priority,
        createdAt: task.createdAt.getTime()
      };

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º sorted set –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏
      await this.redis.zadd(queueName, task.priority, JSON.stringify(taskData));

      console.log(`‚úÖ [QUEUE_SERVICE] –ó–∞–¥–∞—á–∞ ${type} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å. ID: ${task._id}`);
      
      return {
        success: true,
        taskId: task._id,
        message: '–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å'
      };

    } catch (error) {
      console.error(`‚ùå [QUEUE_SERVICE] –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ ${type}:`, error.message);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
   * @param {string} type - –¢–∏–ø –∑–∞–¥–∞—á–∏
   * @param {string} workerId - ID –≤–æ—Ä–∫–µ—Ä–∞
   */
  async getNextTask(type, workerId) {
    try {
      if (!this.isConnected) {
        throw new Error('Redis –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
      }

      const queueName = this.queues[type];
      if (!queueName) {
        throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏: ${type}`);
      }

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
      const result = await this.redis.zpopmax(queueName);
      
      if (!result || result.length === 0) {
        return null;
      }

      const taskData = JSON.parse(result[0]);
      const task = await QueueTask.findById(taskData.taskId);

      if (!task) {
        console.warn(`‚ö†Ô∏è [QUEUE_SERVICE] –ó–∞–¥–∞—á–∞ ${taskData.taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ MongoDB`);
        return null;
      }

      if (task.status !== 'PENDING') {
        console.warn(`‚ö†Ô∏è [QUEUE_SERVICE] –ó–∞–¥–∞—á–∞ ${taskData.taskId} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è`);
        return null;
      }

      // –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—É—é
      await task.markAsProcessing(workerId);

      return task;

    } catch (error) {
      console.error(`‚ùå [QUEUE_SERVICE] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ ${type}:`, error.message);
      return null;
    }
  }

  /**
   * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
   * @param {string} taskId - ID –∑–∞–¥–∞—á–∏
   * @param {Object} result - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  async completeTask(taskId, result) {
    try {
      const task = await QueueTask.findById(taskId);
      if (!task) {
        throw new Error(`–ó–∞–¥–∞—á–∞ ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }

      await task.markAsCompleted(result);
      console.log(`‚úÖ [QUEUE_SERVICE] –ó–∞–¥–∞—á–∞ ${taskId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);

      return { success: true };

    } catch (error) {
      console.error(`‚ùå [QUEUE_SERVICE] –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ ${taskId}:`, error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
   * @param {string} taskId - ID –∑–∞–¥–∞—á–∏
   * @param {Error} error - –û—à–∏–±–∫–∞
   */
  async failTask(taskId, error) {
    try {
      const task = await QueueTask.findById(taskId);
      if (!task) {
        throw new Error(`–ó–∞–¥–∞—á–∞ ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }

      await task.markAsFailed(error);

      // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å
      if (task.isRetryable) {
        const queueName = this.queues[task.type];
        const taskData = {
          taskId: task._id.toString(),
          priority: task.priority,
          createdAt: task.createdAt.getTime()
        };
        
        await this.redis.zadd(queueName, task.priority, JSON.stringify(taskData));
        console.log(`üîÑ [QUEUE_SERVICE] –ó–∞–¥–∞—á–∞ ${taskId} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞`);
      } else {
        console.log(`‚ùå [QUEUE_SERVICE] –ó–∞–¥–∞—á–∞ ${taskId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π (–ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫)`);
      }

      return { success: true };

    } catch (err) {
      console.error(`‚ùå [QUEUE_SERVICE] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—É–¥–∞—á–∏ –∑–∞–¥–∞—á–∏ ${taskId}:`, err.message);
      return { success: false, error: err.message };
    }
  }

  /**
   * –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏
   * @param {string} taskId - ID –∑–∞–¥–∞—á–∏
   */
  async cancelTask(taskId) {
    try {
      const task = await QueueTask.findById(taskId);
      if (!task) {
        throw new Error(`–ó–∞–¥–∞—á–∞ ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }

      if (task.status === 'PROCESSING') {
        throw new Error('–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
      }

      await task.cancel();
      console.log(`üö´ [QUEUE_SERVICE] –ó–∞–¥–∞—á–∞ ${taskId} –æ—Ç–º–µ–Ω–µ–Ω–∞`);

      return { success: true };

    } catch (error) {
      console.error(`‚ùå [QUEUE_SERVICE] –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏ ${taskId}:`, error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π
   */
  async getQueueStats() {
    try {
      const stats = {};
      
      for (const [type, queueName] of Object.entries(this.queues)) {
        const queueLength = await this.redis.zcard(queueName);
        const taskStats = await QueueTask.getTaskStats();
        
        stats[type] = {
          queueLength,
          taskStats: taskStats.reduce((acc, stat) => {
            acc[stat._id] = stat.count;
            return acc;
          }, {})
        };
      }

      return {
        success: true,
        data: stats
      };

    } catch (error) {
      console.error('‚ùå [QUEUE_SERVICE] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} status - –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   */
  async getUserTasks(userId, status = null) {
    try {
      const tasks = await QueueTask.getTasksByUser(userId, status);
      
      return {
        success: true,
        data: tasks
      };

    } catch (error) {
      console.error(`‚ùå [QUEUE_SERVICE] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error.message);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
   * @param {number} daysOld - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
   */
  async cleanupOldTasks(daysOld = 7) {
    try {
      const cutoffDate = new Date(Date.now() - daysOld * 24 * 60 * 60 * 1000);
      
      const result = await QueueTask.deleteMany({
        status: { $in: ['COMPLETED', 'FAILED', 'CANCELLED'] },
        completedAt: { $lt: cutoffDate }
      });

      console.log(`üßπ [QUEUE_SERVICE] –£–¥–∞–ª–µ–Ω–æ ${result.deletedCount} —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á`);
      
      return {
        success: true,
        deletedCount: result.deletedCount
      };

    } catch (error) {
      console.error('‚ùå [QUEUE_SERVICE] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á:', error.message);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Redis
   */
  async close() {
    if (this.redis) {
      await this.redis.quit();
      this.isConnected = false;
      console.log('üîå [QUEUE_SERVICE] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

module.exports = new QueueService();
