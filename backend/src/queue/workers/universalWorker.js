#!/usr/bin/env node

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node src/queue/workers/universalWorker.js
 * 
 * –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
 * - REDIS_HOST - —Ö–æ—Å—Ç Redis (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: localhost)
 * - REDIS_PORT - –ø–æ—Ä—Ç Redis (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 6379)
 * - REDIS_PASSWORD - –ø–∞—Ä–æ–ª—å Redis (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * - REDIS_DB - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Redis (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0)
 * - WORKER_POLL_INTERVAL - –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ –≤ –º—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5000)
 * - WORKER_TASK_TYPES - —Ç–∏–ø—ã –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */

require('dotenv').config({ path: require('path').join(__dirname, '..', '..', '..', '.env') });

const workerService = require('../services/workerService');

// –í—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á
const ALL_TASK_TYPES = [
  'WB_PRICE_UPDATE',
  'WB_REMAINS_UPDATE',
  'MS_PRICE_UPDATE',
  'MS_STOCK_UPDATE',
  'WB_STATISTICS_UPDATE',
  'SYNC_PRODUCTS'
];

async function startWorker() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞...');

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –∑–∞–¥–∞—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    let supportedTaskTypes = ALL_TASK_TYPES;
    
    if (process.env.WORKER_TASK_TYPES) {
      const envTaskTypes = process.env.WORKER_TASK_TYPES.split(',').map(t => t.trim());
      supportedTaskTypes = envTaskTypes.filter(type => ALL_TASK_TYPES.includes(type));
      
      if (supportedTaskTypes.length === 0) {
        console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á –≤ WORKER_TASK_TYPES');
        process.exit(1);
      }
    }

    console.log(`üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á: ${supportedTaskTypes.join(', ')}`);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const pollInterval = parseInt(process.env.WORKER_POLL_INTERVAL) || 5000;
    workerService.setPollInterval(pollInterval);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä
    const started = await workerService.start(supportedTaskTypes);

    if (!started) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Ä–∫–µ—Ä');
      process.exit(1);
    }

    console.log('‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log('‚è±Ô∏è –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏');

    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    setInterval(() => {
      const stats = workerService.getStats();
      if (stats.isRunning) {
        console.log(`üìä [${new Date().toISOString()}] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞:`);
        console.log(`   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–¥–∞—á: ${stats.processedTasks}`);
        console.log(`   - –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á: ${stats.failedTasks}`);
        console.log(`   - –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${Math.floor(stats.uptime / 1000)}—Å`);
        if (stats.currentTask) {
          console.log(`   - –¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞: ${stats.currentTask.id} (${stats.currentTask.type})`);
        }
      }
    }, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
    setInterval(() => {
      const systemInfo = workerService.getSystemInfo();
      console.log(`üíª [${new Date().toISOString()}] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:`);
      console.log(`   - –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${systemInfo.platform} ${systemInfo.arch}`);
      console.log(`   - CPU: ${systemInfo.cpu.count} —è–¥–µ—Ä (${systemInfo.cpu.model})`);
      console.log(`   - –ü–∞–º—è—Ç—å: ${Math.floor(systemInfo.memory.used / 1024 / 1024)}MB / ${Math.floor(systemInfo.memory.total / 1024 / 1024)}MB`);
    }, 300000); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞:', error.message);
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (error) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä
if (require.main === module) {
  startWorker();
}

module.exports = { startWorker };
