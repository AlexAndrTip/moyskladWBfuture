#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Redis —á–µ—Ä–µ–∑ Docker
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/startRedis.js
 */

const { spawn } = require('child_process');
const path = require('path');

function startRedisWithDocker() {
  console.log('üê≥ –ó–∞–ø—É—Å–∫ Redis —á–µ—Ä–µ–∑ Docker...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Docker
  const dockerCheck = spawn('docker', ['--version'], { stdio: 'pipe' });
  
  dockerCheck.on('error', (error) => {
    console.error('‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop –¥–ª—è Windows');
    console.log('üí° –°–∫–∞—á–∞–π—Ç–µ —Å: https://www.docker.com/products/docker-desktop');
    process.exit(1);
  });

  dockerCheck.on('close', (code) => {
    if (code === 0) {
      console.log('‚úÖ Docker –Ω–∞–π–¥–µ–Ω');
      startRedisContainer();
    } else {
      console.error('‚ùå Docker –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      process.exit(1);
    }
  });
}

function startRedisContainer() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ Redis...');
  
  const dockerRun = spawn('docker', [
    'run',
    '-d',
    '--name', 'redis-queue',
    '-p', '6379:6379',
    'redis:latest'
  ], { stdio: 'inherit' });

  dockerRun.on('close', (code) => {
    if (code === 0) {
      console.log('‚úÖ Redis –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:');
      console.log('   - Host: localhost');
      console.log('   - Port: 6379');
      console.log('   - Container: redis-queue');
      console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      setTimeout(() => {
        const testRedis = require('./testRedisConnection');
        testRedis.testRedisConnection();
      }, 3000);
      
    } else {
      console.log('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä Redis —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      console.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:');
      console.log('   docker stop redis-queue');
      console.log('   docker rm redis-queue');
      console.log('   node scripts/startRedis.js');
    }
  });
}

function stopRedisContainer() {
  console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Redis –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...');
  
  const dockerStop = spawn('docker', ['stop', 'redis-queue'], { stdio: 'inherit' });
  
  dockerStop.on('close', (code) => {
    if (code === 0) {
      console.log('‚úÖ Redis –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      
      const dockerRm = spawn('docker', ['rm', 'redis-queue'], { stdio: 'inherit' });
      dockerRm.on('close', (rmCode) => {
        if (rmCode === 0) {
          console.log('‚úÖ Redis –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–¥–∞–ª–µ–Ω');
        }
      });
    }
  });
}

function showRedisStatus() {
  console.log('üìä –°—Ç–∞—Ç—É—Å Redis –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:');
  
  const dockerPs = spawn('docker', ['ps', '-a', '--filter', 'name=redis-queue'], { stdio: 'inherit' });
  
  dockerPs.on('close', (code) => {
    console.log('\nüí° –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Redis:');
    console.log('   –ó–∞–ø—É—Å–∫:   node scripts/startRedis.js');
    console.log('   –û—Å—Ç–∞–Ω–æ–≤–∫–∞: docker stop redis-queue');
    console.log('   –£–¥–∞–ª–µ–Ω–∏–µ:  docker rm redis-queue');
    console.log('   –õ–æ–≥–∏:     docker logs redis-queue');
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const command = process.argv[2];

switch (command) {
  case 'start':
    startRedisWithDocker();
    break;
  case 'stop':
    stopRedisContainer();
    break;
  case 'status':
    showRedisStatus();
    break;
  default:
    console.log('üê≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Redis —á–µ—Ä–µ–∑ Docker\n');
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
    console.log('  node scripts/startRedis.js start   - –ó–∞–ø—É—Å—Ç–∏—Ç—å Redis');
    console.log('  node scripts/startRedis.js stop    - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Redis');
    console.log('  node scripts/startRedis.js status  - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å');
    console.log('\n–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è Redis...\n');
    startRedisWithDocker();
}

module.exports = { startRedisWithDocker, stopRedisContainer, showRedisStatus };
