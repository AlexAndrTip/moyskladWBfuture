// backend/scripts/migrateProductSizesDirect.js
const { MongoClient } = require('mongodb');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017';
const DB_NAME = 'wbms_db';
const COLLECTION_NAME = 'products';

async function migrateProductSizesDirect() {
  let client;
  
  try {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
    console.log(`üì° URI –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${MONGODB_URI}`);
    console.log(`üéØ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${DB_NAME}`);
    console.log(`üìÅ –ö–æ–ª–ª–µ–∫—Ü–∏—è: ${COLLECTION_NAME}`);
    
    client = new MongoClient(MONGODB_URI);
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    const db = client.db(DB_NAME);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const adminDb = client.db('admin');
    const dbList = await adminDb.admin().listDatabases();
    console.log('üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
    dbList.databases.forEach(db => {
      console.log(`   - ${db.name}`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const collections = await db.listCollections().toArray();
    console.log('üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:');
    collections.forEach(col => {
      console.log(`   - ${col.name}`);
    });

    const collection = db.collection(COLLECTION_NAME);
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    console.log('\nüîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏...');
    const products = await collection.find({}).toArray();
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);

    if (products.length === 0) {
      console.log('‚ö†Ô∏è  –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏');
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    console.log('\nüìã –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:');
    console.log(`   ID: ${products[0]._id}`);
    console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${products[0].title || products[0].nmID}`);
    console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—Ä–æ–≤: ${products[0].sizes ? products[0].sizes.length : 0}`);

    let updatedCount = 0;
    let errorCount = 0;

    for (const product of products) {
      try {
        let needsUpdate = false;
        const updatedSizes = [];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞
        if (product.sizes && Array.isArray(product.sizes)) {
          for (const size of product.sizes) {
            const updatedSize = { ...size };
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            if (typeof size.priceWB === 'undefined') {
              updatedSize.priceWB = 0;
              needsUpdate = true;
            }
            if (typeof size.discountedPriceWB === 'undefined') {
              updatedSize.discountedPriceWB = 0;
              needsUpdate = true;
            }
            if (typeof size.clubDiscountedPriceWB === 'undefined') {
              updatedSize.clubDiscountedPriceWB = 0;
              needsUpdate = true;
            }
            if (typeof size.priceMS === 'undefined') {
              updatedSize.priceMS = 0;
              needsUpdate = true;
            }
            if (typeof size.costPriceMS === 'undefined') {
              updatedSize.costPriceMS = 0;
              needsUpdate = true;
            }
            if (typeof size.stockMS === 'undefined') {
              updatedSize.stockMS = 0;
              needsUpdate = true;
            }
            if (typeof size.stockFBS === 'undefined') {
              updatedSize.stockFBS = 0;
              needsUpdate = true;
            }
            if (typeof size.stockFBY === 'undefined') {
              updatedSize.stockFBY = 0;
              needsUpdate = true;
            }
            if (typeof size.lastPriceUpdate === 'undefined') {
              updatedSize.lastPriceUpdate = null;
              needsUpdate = true;
            }
            if (typeof size.lastStockUpdate === 'undefined') {
              updatedSize.lastStockUpdate = null;
              needsUpdate = true;
            }
            
            updatedSizes.push(updatedSize);
          }
        }

        // –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
        if (needsUpdate) {
          await collection.updateOne(
            { _id: product._id },
            { $set: { sizes: updatedSizes } }
          );
          updatedCount++;
          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: ${product.title || product.nmID} (ID: ${product._id})`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ ${product._id}:`, error.message);
        errorCount++;
      }
    }

    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:');
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${updatedCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    console.log(`üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
  } finally {
    if (client) {
      await client.close();
      console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
if (require.main === module) {
  migrateProductSizesDirect()
    .then(() => {
      console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = migrateProductSizesDirect; 