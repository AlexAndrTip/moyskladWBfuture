#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/testRedisConnection.js
 */

require('dotenv').config({ path: require('path').join(__dirname, '..', '.env') });

const Redis = require('ioredis');

async function testRedisConnection() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis...\n');

  const redisConfig = {
    host: process.env.REDIS_HOST || 'localhost',
    port: process.env.REDIS_PORT || 6379,
    password: process.env.REDIS_PASSWORD || null,
    db: process.env.REDIS_DB || 0,
    retryDelayOnFailover: 100,
    maxRetriesPerRequest: 3,
    lazyConnect: true
  };

  console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Redis:');
  console.log(`   Host: ${redisConfig.host}`);
  console.log(`   Port: ${redisConfig.port}`);
  console.log(`   Password: ${redisConfig.password ? '*****' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
  console.log(`   Database: ${redisConfig.db}`);

  const redis = new Redis(redisConfig);

  try {
    console.log('\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis...');
    
    redis.on('connect', () => {
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    });

    redis.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ Redis:', error.message);
    });

    redis.on('close', () => {
      console.log('‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis –∑–∞–∫—Ä—ã—Ç–æ');
    });

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
    await redis.connect();
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis!');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...');
    
    // SET/GET
    await redis.set('test:key', 'test:value');
    const value = await redis.get('test:key');
    console.log(`‚úÖ SET/GET: ${value}`);

    // Sorted Set (–¥–ª—è –æ—á–µ—Ä–µ–¥–µ–π)
    await redis.zadd('test:queue', 5, JSON.stringify({ id: 'test1', priority: 5 }));
    await redis.zadd('test:queue', 10, JSON.stringify({ id: 'test2', priority: 10 }));
    
    const queueLength = await redis.zcard('test:queue');
    console.log(`‚úÖ Sorted Set: –¥–ª–∏–Ω–∞ –æ—á–µ—Ä–µ–¥–∏ = ${queueLength}`);
    
    const highestPriority = await redis.zpopmax('test:queue');
    console.log(`‚úÖ ZPOPMAX: ${highestPriority[0]}`);

    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await redis.del('test:key');
    await redis.del('test:queue');
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Redis
    const info = await redis.info('server');
    const versionMatch = info.match(/redis_version:([^\r\n]+)/);
    const version = versionMatch ? versionMatch[1] : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    console.log(`üìä –í–µ—Ä—Å–∏—è Redis: ${version}`);

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã Redis –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    console.log('‚úÖ Redis –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å —Å–∏—Å—Ç–µ–º–æ–π –æ—á–µ—Ä–µ–¥–µ–π');

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis:');
    console.error(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
    console.error(`   –ö–æ–¥: ${error.code}`);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
      console.log('   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Redis —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
      console.log('   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ');
      console.log('   3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Redis:');
      console.log('      - Windows: choco install redis-64');
      console.log('      - WSL: sudo apt install redis-server');
      console.log('      - Docker: docker run -d -p 6379:6379 redis:latest');
    }
    
    process.exit(1);
  } finally {
    await redis.quit();
    console.log('\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (error) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
  testRedisConnection();
}

module.exports = { testRedisConnection };
