#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤ –æ—á–µ—Ä–µ–¥–µ–π
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/startWorkers.js [—Ç–∏–ø_–≤–æ—Ä–∫–µ—Ä–∞]
 * 
 * –¢–∏–ø—ã –≤–æ—Ä–∫–µ—Ä–æ–≤:
 * - price - –≤–æ—Ä–∫–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
 * - remains - –≤–æ—Ä–∫–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤
 * - universal - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–æ—Ä–∫–µ—Ä
 * - all - –≤—Å–µ –≤–æ—Ä–∫–µ—Ä—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
 */

const { spawn } = require('child_process');
const path = require('path');

const WORKERS = {
  price: 'src/queue/workers/priceUpdateWorker.js',
  remains: 'src/queue/workers/remainsUpdateWorker.js',
  universal: 'src/queue/workers/universalWorker.js'
};

function startWorker(workerType) {
  const workerPath = WORKERS[workerType];
  if (!workerPath) {
    console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–æ—Ä–∫–µ—Ä–∞: ${workerType}`);
    console.log(`–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: ${Object.keys(WORKERS).join(', ')}`);
    process.exit(1);
  }

  const fullPath = path.join(__dirname, '..', workerPath);
  
  console.log(`üöÄ –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ ${workerType}...`);
  
  const worker = spawn('node', [fullPath], {
    stdio: 'inherit',
    cwd: path.join(__dirname, '..')
  });

  worker.on('error', (error) => {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ ${workerType}:`, error.message);
  });

  worker.on('exit', (code, signal) => {
    if (signal) {
      console.log(`üõë –í–æ—Ä–∫–µ—Ä ${workerType} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª–æ–º: ${signal}`);
    } else {
      console.log(`üõë –í–æ—Ä–∫–µ—Ä ${workerType} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: ${code}`);
    }
  });

  return worker;
}

function startAllWorkers() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤...');
  
  const workers = [];
  
  for (const [type, path] of Object.entries(WORKERS)) {
    const worker = startWorker(type);
    workers.push({ type, process: worker });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.on('SIGINT', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –≤–æ—Ä–∫–µ—Ä—ã...');
    
    workers.forEach(({ type, process: workerProcess }) => {
      console.log(`üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ ${type}...`);
      workerProcess.kill('SIGTERM');
    });

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
    setTimeout(() => {
      console.log('‚úÖ –í—Å–µ –≤–æ—Ä–∫–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
      process.exit(0);
    }, 5000);
  });

  process.on('SIGTERM', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –≤–æ—Ä–∫–µ—Ä—ã...');
    
    workers.forEach(({ type, process: workerProcess }) => {
      console.log(`üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ ${type}...`);
      workerProcess.kill('SIGTERM');
    });

    setTimeout(() => {
      console.log('‚úÖ –í—Å–µ –≤–æ—Ä–∫–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
      process.exit(0);
    }, 5000);
  });

  console.log('‚úÖ –í—Å–µ –≤–æ—Ä–∫–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã');
  console.log('‚è±Ô∏è –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤');
}

function main() {
  const workerType = process.argv[2] || 'all';

  if (workerType === 'all') {
    startAllWorkers();
  } else {
    startWorker(workerType);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (error) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º
if (require.main === module) {
  main();
}

module.exports = { startWorker, startAllWorkers };
