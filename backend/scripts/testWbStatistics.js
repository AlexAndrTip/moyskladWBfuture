/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ WB Statistics API
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/testWbStatistics.js
 */

const axios = require('axios');
require('dotenv').config({ path: require('path').join(__dirname, '..', '.env') });

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:3900';
const TEST_TOKEN = process.env.TEST_JWT_TOKEN; // –¢–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

if (!TEST_TOKEN) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω TEST_JWT_TOKEN –≤ .env —Ñ–∞–π–ª–µ');
  console.log('–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–π—Ç–µ JWT —Ç–æ–∫–µ–Ω –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ .env –∫–∞–∫ TEST_JWT_TOKEN');
  process.exit(1);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
async function makeRequest(method, endpoint, data = null) {
  try {
    const config = {
      method,
      url: `${API_BASE_URL}${endpoint}`,
      headers: {
        'Authorization': `Bearer ${TEST_TOKEN}`,
        'Content-Type': 'application/json'
      }
    };

    if (data) {
      config.data = data;
    }

    const response = await axios(config);
    return response.data;
  } catch (error) {
    if (error.response) {
      throw new Error(`HTTP ${error.response.status}: ${JSON.stringify(error.response.data)}`);
    } else {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    }
  }
}

// –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function testGetStats() {
  console.log('\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ FBY...');
  
  try {
    const result = await makeRequest('GET', '/api/wb-statistics/stats');
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:');
    console.log(`   - –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${result.overall.totalProducts}`);
    console.log(`   - –¢–æ–≤–∞—Ä–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏: ${result.overall.totalWithStock}`);
    console.log(`   - –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: ${result.overall.totalStockQuantity}`);
    console.log(`   - –ö–∞–±–∏–Ω–µ—Ç–æ–≤: ${result.byCabinet.length}`);
    
    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
    return null;
  }
}

async function testGetFilteredStocks(cabinetId) {
  console.log('\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤...');
  
  try {
    const result = await makeRequest('GET', `/api/wb-statistics/stocks/${cabinetId}?dateFrom=2019-06-20`);
    console.log('‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ:');
    console.log(`   - –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${result.totalRecords}`);
    console.log(`   - –ö–∞–±–∏–Ω–µ—Ç: ${result.cabinetName}`);
    console.log(`   - –î–∞—Ç–∞: ${result.dateFrom}`);
    
    if (result.data && result.data.length > 0) {
      console.log('   - –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏:');
      const sample = result.data[0];
      console.log(`     * –ë–∞—Ä–∫–æ–¥: ${sample.barcode}`);
      console.log(`     * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${sample.quantity}`);
      console.log(`     * –°–∫–ª–∞–¥: ${sample.warehouseName}`);
    }
    
    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤:', error.message);
    return null;
  }
}

async function testUpdateStocks(cabinetId) {
  console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ FBY...');
  
  try {
    const result = await makeRequest('POST', `/api/wb-statistics/update-stocks/${cabinetId}`, {
      dateFrom: '2019-06-20',
      filters: {
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      }
    });
    
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:');
    console.log(`   - –ö–∞–±–∏–Ω–µ—Ç: ${result.cabinetName}`);
    console.log(`   - –£—Å–ø–µ—à–Ω–æ: ${result.success}`);
    console.log(`   - –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${result.total}`);
    console.log(`   - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–∞—Ä–∫–æ–¥–æ–≤: ${result.uniqueBarcodes}`);
    console.log(`   - –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${result.updated}`);
    console.log(`   - –ù–µ –Ω–∞–π–¥–µ–Ω–æ: ${result.notFound}`);
    
    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤:', error.message);
    return null;
  }
}

async function testStatisticsApi(cabinetId) {
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Statistics API...');
  
  try {
    const result = await makeRequest('GET', `/api/wb-statistics/test/${cabinetId}?dateFrom=2019-06-20`);
    console.log('‚úÖ –¢–µ—Å—Ç Statistics API –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ:');
    console.log(`   - –ö–∞–±–∏–Ω–µ—Ç: ${result.cabinetName}`);
    console.log(`   - –î–∞—Ç–∞: ${result.dateFrom}`);
    console.log(`   - –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${result.totalRecords}`);
    console.log(`   - –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö: ${result.sampleData.length} –∑–∞–ø–∏—Å–µ–π`);
    
    if (result.sampleData && result.sampleData.length > 0) {
      console.log('   - –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å:');
      const sample = result.sampleData[0];
      console.log(`     * –ë–∞—Ä–∫–æ–¥: ${sample.barcode}`);
      console.log(`     * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${sample.quantity}`);
      console.log(`     * –ê—Ä—Ç–∏–∫—É–ª WB: ${sample.nmId}`);
    }
    
    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Statistics API:', error.message);
    return null;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ WB Statistics API');
  console.log(`üìç API URL: ${API_BASE_URL}`);
  console.log(`üîë –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω: ${TEST_TOKEN.substring(0, 20)}...`);
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await testGetStats();
    
    if (!stats || stats.byCabinet.length === 0) {
      console.log('\n‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      console.log('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ WB –∫–∞–±–∏–Ω–µ—Ç—ã');
      return;
    }
    
    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const testCabinetId = stats.byCabinet[0].cabinetId;
    console.log(`\nüéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${stats.byCabinet[0].cabinetName} (${testCabinetId})`);
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º Statistics API
    await testStatisticsApi(testCabinetId);
    
    // 3. –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
    await testGetFilteredStocks(testCabinetId);
    
    // 4. –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ - —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)
    console.log('\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –°–ª–µ–¥—É—é—â–∏–π —Ç–µ—Å—Ç –æ–±–Ω–æ–≤–∏—Ç –æ—Å—Ç–∞—Ç–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    console.log('–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Ç–º–µ–Ω—ã –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥...');
    
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    await testUpdateStocks(testCabinetId);
    
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runTests().catch(console.error);
}

module.exports = {
  testGetStats,
  testGetFilteredStocks,
  testUpdateStocks,
  testStatisticsApi,
  runTests
};
