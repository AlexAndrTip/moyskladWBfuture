#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Redis –Ω–∞ Windows
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/installRedisWindows.js
 */

const { spawn, exec } = require('child_process');
const os = require('os');

function checkWindows() {
  if (os.platform() !== 'win32') {
    console.log('‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è Windows');
    process.exit(1);
  }
}

function checkChocolatey() {
  return new Promise((resolve) => {
    exec('choco --version', (error, stdout, stderr) => {
      if (error) {
        console.log('‚ùå Chocolatey –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        resolve(false);
      } else {
        console.log(`‚úÖ Chocolatey –Ω–∞–π–¥–µ–Ω: ${stdout.trim()}`);
        resolve(true);
      }
    });
  });
}

function installChocolatey() {
  console.log('üç´ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Chocolatey...');
  console.log('‚ö†Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–µ PowerShell –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:');
  console.log('');
  console.log('Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(\'https://community.chocolatey.org/install.ps1\'))');
  console.log('');
  console.log('–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Chocolatey –∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞.');
  process.exit(0);
}

function installRedis() {
  console.log('üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Redis —á–µ—Ä–µ–∑ Chocolatey...');
  
  const choco = spawn('choco', ['install', 'redis-64', '-y'], { 
    stdio: 'inherit',
    shell: true 
  });

  choco.on('close', (code) => {
    if (code === 0) {
      console.log('‚úÖ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      console.log('üöÄ –ó–∞–ø—É—Å–∫ Redis –∫–∞–∫ —Å–ª—É–∂–±—ã...');
      startRedisService();
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Redis');
      process.exit(1);
    }
  });
}

function startRedisService() {
  console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Redis –∫–∞–∫ —Å–ª—É–∂–±—ã Windows...');
  
  const installService = spawn('redis-server', ['--service-install'], { 
    stdio: 'inherit',
    shell: true 
  });

  installService.on('close', (code) => {
    if (code === 0) {
      console.log('‚úÖ –°–ª—É–∂–±–∞ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
      
      const startService = spawn('redis-server', ['--service-start'], { 
        stdio: 'inherit',
        shell: true 
      });

      startService.on('close', (startCode) => {
        if (startCode === 0) {
          console.log('‚úÖ –°–ª—É–∂–±–∞ Redis –∑–∞–ø—É—â–µ–Ω–∞');
          console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
          
          setTimeout(() => {
            const testRedis = require('./testRedisConnection');
            testRedis.testRedisConnection();
          }, 3000);
        } else {
          console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–ª—É–∂–±—ã Redis');
          console.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é:');
          console.log('   redis-server --service-start');
        }
      });
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–ª—É–∂–±—ã Redis');
      console.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é:');
      console.log('   redis-server --service-install');
      console.log('   redis-server --service-start');
    }
  });
}

function showRedisStatus() {
  console.log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Redis...');
  
  exec('sc query Redis', (error, stdout, stderr) => {
    if (error) {
      console.log('‚ùå –°–ª—É–∂–±–∞ Redis –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      console.log('üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Redis: node scripts/installRedisWindows.js');
    } else {
      console.log('üìã –°—Ç–∞—Ç—É—Å —Å–ª—É–∂–±—ã Redis:');
      console.log(stdout);
    }
  });
}

function stopRedisService() {
  console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É–∂–±—ã Redis...');
  
  const stopService = spawn('redis-server', ['--service-stop'], { 
    stdio: 'inherit',
    shell: true 
  });

  stopService.on('close', (code) => {
    if (code === 0) {
      console.log('‚úÖ –°–ª—É–∂–±–∞ Redis –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–ª—É–∂–±—ã Redis');
    }
  });
}

function uninstallRedisService() {
  console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª—É–∂–±—ã Redis...');
  
  const uninstallService = spawn('redis-server', ['--service-uninstall'], { 
    stdio: 'inherit',
    shell: true 
  });

  uninstallService.on('close', (code) => {
    if (code === 0) {
      console.log('‚úÖ –°–ª—É–∂–±–∞ Redis —É–¥–∞–ª–µ–Ω–∞');
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª—É–∂–±—ã Redis');
    }
  });
}

async function main() {
  checkWindows();
  
  const command = process.argv[2];

  switch (command) {
    case 'install':
      const hasChoco = await checkChocolatey();
      if (!hasChoco) {
        installChocolatey();
      } else {
        installRedis();
      }
      break;
      
    case 'start':
      startRedisService();
      break;
      
    case 'stop':
      stopRedisService();
      break;
      
    case 'status':
      showRedisStatus();
      break;
      
    case 'uninstall':
      uninstallRedisService();
      break;
      
    default:
      console.log('ü™ü –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Redis –Ω–∞ Windows\n');
      console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
      console.log('  node scripts/installRedisWindows.js install   - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Redis');
      console.log('  node scripts/installRedisWindows.js start     - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª—É–∂–±—É');
      console.log('  node scripts/installRedisWindows.js stop      - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ª—É–∂–±—É');
      console.log('  node scripts/installRedisWindows.js status    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å');
      console.log('  node scripts/installRedisWindows.js uninstall - –£–¥–∞–ª–∏—Ç—å —Å–ª—É–∂–±—É');
      console.log('\n–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞...\n');
      
      const hasChoco = await checkChocolatey();
      if (!hasChoco) {
        installChocolatey();
      } else {
        installRedis();
      }
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (error) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º
if (require.main === module) {
  main();
}

module.exports = { 
  installRedis, 
  startRedisService, 
  stopRedisService, 
  showRedisStatus 
};
