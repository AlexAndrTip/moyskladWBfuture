/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–µ–π
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/testQueueSystem.js
 * 
 * –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:
 * 1. –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
 * 2. Redis –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω
 * 3. –í –ë–î –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å WB –∫–∞–±–∏–Ω–µ—Ç–∞–º–∏
 * 4. –£ WB –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
 */

const axios = require('axios');
require('dotenv').config({ path: require('path').join(__dirname, '..', '.env') });

const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:3900';

async function testQueueSystem() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–µ–π...\n');

    // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const usersResponse = await axios.get(`${API_BASE_URL}/api/users`, {
      headers: {
        'Authorization': `Bearer ${process.env.TEST_TOKEN || 'test-token'}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (usersResponse.data && usersResponse.data.length > 0) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersResponse.data.length}`);
      const testUser = usersResponse.data[0];
      console.log(`   –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${testUser.username} (${testUser._id})`);
    } else {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    // 2. –ü–æ–ª—É—á–∞–µ–º WB –∫–∞–±–∏–Ω–µ—Ç—ã
    console.log('\n2. –ü–æ–ª—É—á–∞–µ–º WB –∫–∞–±–∏–Ω–µ—Ç—ã...');
    const cabinetsResponse = await axios.get(`${API_BASE_URL}/api/wbcabinets`, {
      headers: {
        'Authorization': `Bearer ${process.env.TEST_TOKEN || 'test-token'}`,
        'Content-Type': 'application/json'
      }
    });

    if (cabinetsResponse.data && cabinetsResponse.data.length > 0) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ WB –∫–∞–±–∏–Ω–µ—Ç–æ–≤: ${cabinetsResponse.data.length}`);
      const testCabinet = cabinetsResponse.data[0];
      console.log(`   –¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–±–∏–Ω–µ—Ç: ${testCabinet.name} (${testCabinet._id})`);
    } else {
      console.log('‚ùå WB –∫–∞–±–∏–Ω–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω WB
    console.log('\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω WB...');
    try {
      const priceTaskResponse = await axios.post(`${API_BASE_URL}/api/queue/tasks`, {
        type: 'WB_PRICE_UPDATE',
        data: {
          cabinetId: cabinetsResponse.data[0]._id,
          userId: usersResponse.data[0]._id,
          limit: 10,
          offset: 0
        },
        options: {
          priority: 7,
          cabinetName: cabinetsResponse.data[0].name,
          maxAttempts: 3
        }
      }, {
        headers: {
          'Authorization': `Bearer ${process.env.TEST_TOKEN || 'test-token'}`,
          'Content-Type': 'application/json'
        }
      });

      if (priceTaskResponse.data && priceTaskResponse.data.success) {
        console.log(`‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω WB –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
        console.log(`   Task ID: ${priceTaskResponse.data.data.taskId}`);
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω WB');
      }
    } catch (priceTaskError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω WB:`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${priceTaskError.response?.status || 'N/A'}`);
      console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${priceTaskError.response?.data?.message || priceTaskError.message}`);
    }

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ WB
    console.log('\n4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ WB...');
    try {
      const remainsTaskResponse = await axios.post(`${API_BASE_URL}/api/queue/tasks`, {
        type: 'WB_REMAINS_UPDATE',
        data: {
          cabinetId: cabinetsResponse.data[0]._id,
          userId: usersResponse.data[0]._id
        },
        options: {
          priority: 6,
          cabinetName: cabinetsResponse.data[0].name,
          maxAttempts: 3
        }
      }, {
        headers: {
          'Authorization': `Bearer ${process.env.TEST_TOKEN || 'test-token'}`,
          'Content-Type': 'application/json'
        }
      });

      if (remainsTaskResponse.data && remainsTaskResponse.data.success) {
        console.log(`‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ WB –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
        console.log(`   Task ID: ${remainsTaskResponse.data.data.taskId}`);
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ WB');
      }
    } catch (remainsTaskError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ WB:`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${remainsTaskError.response?.status || 'N/A'}`);
      console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${remainsTaskError.response?.data?.message || remainsTaskError.message}`);
    }

    // 5. –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n5. –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    try {
      const userTasksResponse = await axios.get(`${API_BASE_URL}/api/queue/tasks?limit=10`, {
        headers: {
          'Authorization': `Bearer ${process.env.TEST_TOKEN || 'test-token'}`,
          'Content-Type': 'application/json'
        }
      });

      if (userTasksResponse.data && userTasksResponse.data.success) {
        console.log(`‚úÖ –ó–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ`);
        console.log(`   –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${userTasksResponse.data.data.pagination.total}`);
        console.log(`   –ó–∞–¥–∞—á –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${userTasksResponse.data.data.tasks.length}`);
        
        userTasksResponse.data.data.tasks.forEach((task, index) => {
          console.log(`   ${index + 1}. ${task.type} - ${task.status} (${task.createdAt})`);
        });
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }
    } catch (userTasksError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${userTasksError.response?.status || 'N/A'}`);
      console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${userTasksError.response?.data?.message || userTasksError.message}`);
    }

    // 6. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–µ–π
    console.log('\n6. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–µ–π...');
    try {
      const statsResponse = await axios.get(`${API_BASE_URL}/api/queue/stats`, {
        headers: {
          'Authorization': `Bearer ${process.env.TEST_TOKEN || 'test-token'}`,
          'Content-Type': 'application/json'
        }
      });

      if (statsResponse.data && statsResponse.data.success) {
        console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
        
        Object.entries(statsResponse.data.data).forEach(([queueType, stats]) => {
          console.log(`   ${queueType}:`);
          console.log(`     - –î–ª–∏–Ω–∞ –æ—á–µ—Ä–µ–¥–∏: ${stats.queueLength}`);
          console.log(`     - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á:`, stats.taskStats);
        });
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π');
      }
    } catch (statsError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π:`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${statsError.response?.status || 'N/A'}`);
      console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${statsError.response?.data?.message || statsError.message}`);
    }

    // 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–∏–ø–æ–º
    console.log('\n7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–∏–ø–æ–º...');
    try {
      const invalidTaskResponse = await axios.post(`${API_BASE_URL}/api/queue/tasks`, {
        type: 'INVALID_TASK_TYPE',
        data: {
          cabinetId: cabinetsResponse.data[0]._id,
          userId: usersResponse.data[0]._id
        }
      }, {
        headers: {
          'Authorization': `Bearer ${process.env.TEST_TOKEN || 'test-token'}`,
          'Content-Type': 'application/json'
        }
      });

      console.log('‚ùå –ó–∞–¥–∞—á–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–∏–ø–æ–º –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ (—ç—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏)');
    } catch (invalidTaskError) {
      if (invalidTaskError.response?.status === 400) {
        console.log(`‚úÖ –ó–∞–¥–∞—á–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–∏–ø–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞`);
        console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${invalidTaskError.response.data.message}`);
      } else {
        console.log(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏:`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${invalidTaskError.response?.status || 'N/A'}`);
        console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${invalidTaskError.response?.data?.message || invalidTaskError.message}`);
      }
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìã –†–µ–∑—é–º–µ:');
    console.log('   - –°–∏—Å—Ç–µ–º–∞ –æ—á–µ—Ä–µ–¥–µ–π –¥–æ–ª–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏');
    console.log('   - –í–æ—Ä–∫–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏');
    console.log('   - API –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
    console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    if (error.response) {
      console.error(`   –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
      console.error(`   –î–∞–Ω–Ω—ã–µ:`, error.response.data);
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
  testQueueSystem();
}

module.exports = { testQueueSystem };
