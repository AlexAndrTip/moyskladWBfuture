#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Redis –Ω–∞ Windows
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/startRedisWindows.js
 */

const { spawn, exec } = require('child_process');
const os = require('os');

function checkWindows() {
  if (os.platform() !== 'win32') {
    console.log('‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è Windows');
    process.exit(1);
  }
}

function checkRedisInstalled() {
  return new Promise((resolve) => {
    exec('redis-server --version', (error, stdout, stderr) => {
      if (error) {
        console.log('‚ùå Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        resolve(false);
      } else {
        console.log(`‚úÖ Redis –Ω–∞–π–¥–µ–Ω: ${stdout.trim()}`);
        resolve(true);
      }
    });
  });
}

function startRedisService() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ Redis –∫–∞–∫ —Å–ª—É–∂–±—ã Windows...');
  
  const startService = spawn('redis-server', ['--service-start'], { 
    stdio: 'inherit',
    shell: true 
  });

  startService.on('close', (code) => {
    if (code === 0) {
      console.log('‚úÖ –°–ª—É–∂–±–∞ Redis –∑–∞–ø—É—â–µ–Ω–∞');
      console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
      
      setTimeout(() => {
        const testRedis = require('./testRedisConnection');
        testRedis.testRedisConnection();
      }, 3000);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–ª—É–∂–±—ã Redis');
      console.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:');
      console.log('   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Redis: node scripts/installRedisWindows.js');
      console.log('   2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é: redis-server --service-start');
    }
  });
}

function startRedisManual() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ Redis –≤—Ä—É—á–Ω—É—é...');
  console.log('‚ö†Ô∏è Redis –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ. –ó–∞–∫—Ä–æ–π—Ç–µ –æ–∫–Ω–æ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.');
  
  const redisServer = spawn('redis-server', [], { 
    stdio: 'inherit',
    shell: true 
  });

  redisServer.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Redis:', error.message);
    console.log('üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Redis: node scripts/installRedisWindows.js');
  });

  redisServer.on('close', (code) => {
    console.log(`üõë Redis –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å –∫–æ–¥–æ–º: ${code}`);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.on('SIGINT', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Redis...');
    redisServer.kill('SIGTERM');
  });

  process.on('SIGTERM', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Redis...');
    redisServer.kill('SIGTERM');
  });
}

function showRedisStatus() {
  console.log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Redis...');
  
  exec('sc query Redis', (error, stdout, stderr) => {
    if (error) {
      console.log('‚ùå –°–ª—É–∂–±–∞ Redis –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      console.log('üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Redis: node scripts/installRedisWindows.js');
    } else {
      console.log('üìã –°—Ç–∞—Ç—É—Å —Å–ª—É–∂–±—ã Redis:');
      console.log(stdout);
    }
  });
}

function stopRedisService() {
  console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É–∂–±—ã Redis...');
  
  const stopService = spawn('redis-server', ['--service-stop'], { 
    stdio: 'inherit',
    shell: true 
  });

  stopService.on('close', (code) => {
    if (code === 0) {
      console.log('‚úÖ –°–ª—É–∂–±–∞ Redis –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–ª—É–∂–±—ã Redis');
    }
  });
}

async function main() {
  checkWindows();
  
  const command = process.argv[2];

  switch (command) {
    case 'service':
      const isInstalled = await checkRedisInstalled();
      if (isInstalled) {
        startRedisService();
      } else {
        console.log('üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Redis: node scripts/installRedisWindows.js');
      }
      break;
      
    case 'manual':
      const isInstalledManual = await checkRedisInstalled();
      if (isInstalledManual) {
        startRedisManual();
      } else {
        console.log('üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Redis: node scripts/installRedisWindows.js');
      }
      break;
      
    case 'stop':
      stopRedisService();
      break;
      
    case 'status':
      showRedisStatus();
      break;
      
    default:
      console.log('ü™ü –ó–∞–ø—É—Å–∫ Redis –Ω–∞ Windows\n');
      console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
      console.log('  node scripts/startRedisWindows.js service  - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–∫ —Å–ª—É–∂–±—É');
      console.log('  node scripts/startRedisWindows.js manual   - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é');
      console.log('  node scripts/startRedisWindows.js stop     - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ª—É–∂–±—É');
      console.log('  node scripts/startRedisWindows.js status   - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å');
      console.log('\n–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ —Å–ª—É–∂–±–∞...\n');
      
      const isInstalled = await checkRedisInstalled();
      if (isInstalled) {
        startRedisService();
      } else {
        console.log('üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Redis: node scripts/installRedisWindows.js');
      }
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (error) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º
if (require.main === module) {
  main();
}

module.exports = { 
  startRedisService, 
  startRedisManual, 
  stopRedisService, 
  showRedisStatus 
};
