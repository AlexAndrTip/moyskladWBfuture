# main.py
import logging
import asyncio
# import downloader_yt_dpl # –≠—Ç—É —Å—Ç—Ä–æ–∫—É –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å, –µ—Å–ª–∏ downloader_yt_dpl –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∑–¥–µ—Å—å

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes
)

from config import BOT_TOKEN
from user_db import (
    init_db,
    add_user,
    get_user_status,
    request_access_handler,
    approve_or_decline_handler,
    get_user_access_list
)
# –ò–º–ø–æ—Ä—Ç—ã ConversationHandler, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã
from download_video import download_video_conversation
from getaudio import extract_audio_conversation
from AudioTotext import extract_text_conversation
from tts import tts_conversation
from scenario import scenario_conversation
from tts_processor import tts_processor_conversation
from generate_video_conversation import generate_video_conversation


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


async def go_back_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        try:
            await query.answer()
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è query.answer() error: {e}")
        try:
            await query.message.delete()
        except Exception as e:
            logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞–∑–∞–¥: {e}")

    context.user_data.clear()
    logger.info(f"User {update.effective_user.id}: navigated back, user_data cleared.")
    source_for_menu = query or update.message or update
    await show_main_menu(source_for_menu)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    context.user_data.clear()
    add_user(user)
    status = get_user_status(user.id)

    if status == 'approved':
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ –∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤. "
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )
        await show_main_menu(update.message)
    elif status == 'pending':
        await update.message.reply_text("–í–∞—à –∑–∞–ø—Ä–æ—Å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ.")
    else:
        keyboard = [
            [InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data='request_access')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø.",
            reply_markup=reply_markup
        )


async def show_main_menu(source_update_obj):
    keyboard = [
        [
            InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ", callback_data='download_video'),
            InlineKeyboardButton("üîä –ò–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ", callback_data='extract_audio')
        ],
        [
            InlineKeyboardButton("üìù –ò–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç", callback_data='extract_text'),
            InlineKeyboardButton("üó£Ô∏è –û–∑–≤—É—á–∏—Ç—å", callback_data='tts_initiate')
        ],
        [
            InlineKeyboardButton("üé¨ –°—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è Reels (4 —à—Ç.)", callback_data='generate_script')
        ],
        [
            InlineKeyboardButton("üìπ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å –∞–≤–∞—Ç–∞—Ä–æ–º", callback_data='generate_video')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    menu_text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    if hasattr(source_update_obj, 'reply_text'):
        await source_update_obj.reply_text(menu_text, reply_markup=reply_markup)
    else:
        await source_update_obj.message.reply_text(menu_text, reply_markup=reply_markup)


async def handle_command_as_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data_str: str):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä–∞—è –∏–º–∏—Ç–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤ CallbackQuery.
    –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å ConversationHandler, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ CallbackQueryHandler.
    """
    user_id = update.effective_user.id
    allowed = get_user_access_list(user_id)

    if callback_data_str not in allowed:
        await update.message.reply_text(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ '{callback_data_str}'.")
        return

    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç CallbackQuery.
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã CallbackQueryHandler.
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Ö –≤ None, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º—ã –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏.
    fake_query = type('obj', (object,), {
        'id': f'fake_{update.update_id}',
        'from_user': update.effective_user,
        'message': update.message,
        'chat_instance': 'fake_chat_instance',
        'data': callback_data_str,
        'answer': lambda *args, **kwargs: None, # –ü—É—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è answer
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –≤ Telegram.ext:
        'game_short_name': None,
        'inline_message_id': None,
        'chat_instance': 'fake_chat_instance', # –û–±—ã—á–Ω–æ –µ—Å—Ç—å –¥–ª—è –∫–≤–µ—Ä–∏
        'from_user': update.effective_user, # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ from_user –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
        'chat': update.effective_chat # –î–æ–±–∞–≤–ª—è–µ–º chat, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    })()

    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π Update –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—à CallbackQuery
    fake_update = Update(update_id=update.update_id, callback_query=fake_query)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ Application
    await context.application.update_queue.put(fake_update)
    logger.info(f"User {user_id}: Command '{callback_data_str}' simulated as CallbackQuery.")


async def download_video_command_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_command_as_callback(update, context, 'download_video')

async def extract_audio_command_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_command_as_callback(update, context, 'extract_audio')

async def extract_text_command_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_command_as_callback(update, context, 'extract_text')

async def tts_initiate_command_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_command_as_callback(update, context, 'tts_initiate')

async def generate_script_command_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_command_as_callback(update, context, 'generate_script')

async def generate_video_command_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_command_as_callback(update, context, 'generate_video')


async def on_startup(app: Application) -> None:
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    # logger.info("on_startup: –∑–∞–ø—É—Å–∫–∞–µ–º background task process_queue()")
    # app.bot_data["process_queue_task"] = asyncio.create_task(downloader_yt_dpl.process_queue())
    # –≠—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –æ—á–µ—Ä–µ–¥–∏


async def on_shutdown(app: Application) -> None:
    logger.info("–ë–æ—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è!")
    # logger.info("on_shutdown: –∑–∞–≤–µ—Ä—à–∞–µ–º background task process_queue()")
    # task = app.bot_data.get("process_queue_task")
    # if task:
    #     task.cancel()
    #     try:
    #         await task
    #     except asyncio.CancelledError:
    #         logger.info("‚úÖ process_queue –∑–∞–≤–µ—Ä—à—ë–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    # –≠—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –æ—á–µ—Ä–µ–¥–∏


def main():
    init_db()

    application = (
        Application
        .builder()
        .token(BOT_TOKEN)
        .post_init(on_startup)
        .post_shutdown(on_shutdown)
        .build()
    )

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CallbackQueryHandler(go_back_handler, pattern=r'^go_back$'))
    application.add_handler(CallbackQueryHandler(request_access_handler, pattern=r'^request_access$'))
    application.add_handler(CallbackQueryHandler(approve_or_decline_handler, pattern=r'^(approve|decline)_\d+$'))


    application.add_handler(download_video_conversation)
    application.add_handler(extract_audio_conversation)
    application.add_handler(extract_text_conversation)
    application.add_handler(tts_conversation)
    application.add_handler(scenario_conversation)
    application.add_handler(tts_processor_conversation)
    application.add_handler(generate_video_conversation)

    application.run_polling()


if __name__ == '__main__':
    main()
